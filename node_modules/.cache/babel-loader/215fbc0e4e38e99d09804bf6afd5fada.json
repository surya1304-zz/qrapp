{"ast":null,"code":"import _classCallCheck from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/plantstats/plantstats.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './plantstats.css';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport { Redirect, withRouter } from \"react-router\";\nimport { LineChart, Line, Label, Legend, AreaChart, Area, Brush, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { Typography } from \"@material-ui/core\";\nimport LinearStatic from '../../Card/Progress/progress';\n\nvar PlantStats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlantStats, _Component);\n\n  function PlantStats(props) {\n    var _this;\n\n    _classCallCheck(this, PlantStats);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlantStats).call(this, props));\n    _this.pr = {\n      cycle: \"<div><span>Current Cycle - </span><strong>\".concat(_this.props.number, \"</strong></div>\"),\n      select: \"\",\n      startDate: \"<div><span>StartDate - </span><strong>\" + _this.props.startDate + \"</strong></div>\",\n      endDate: \"<div><span>ExpectedEndDate - </span><strong>\" + _this.props.endDate + \"</strong></div>\"\n    };\n    _this.state = {\n      number: 14,\n      duration: 0,\n      current: 0,\n      startDate: '16/10/2019',\n      endDate: '1/11/2019',\n      redirect: false,\n      plant: _this.props.plants.split('&')[0].toLowerCase(),\n      totalmodules: 0,\n      data: [{\n        \"name\": \"Page A\",\n        \"uv\": 4000,\n        \"pv\": 2400,\n        \"amt\": 2400\n      }, {\n        \"name\": \"Page B\",\n        \"uv\": 3000,\n        \"pv\": 1398,\n        \"amt\": 2210\n      }, {\n        \"name\": \"Page C\",\n        \"uv\": 2000,\n        \"pv\": 9800,\n        \"amt\": 2290\n      }, {\n        \"name\": \"Page D\",\n        \"uv\": 2780,\n        \"pv\": 3908,\n        \"amt\": 2000\n      }, {\n        \"name\": \"Page E\",\n        \"uv\": 1890,\n        \"pv\": 4800,\n        \"amt\": 2181\n      }, {\n        \"name\": \"Page F\",\n        \"uv\": 2390,\n        \"pv\": 3800,\n        \"amt\": 2500\n      }, {\n        \"name\": \"Page G\",\n        \"uv\": 3490,\n        \"pv\": 4300,\n        \"amt\": 2100\n      }],\n      data1: [],\n      totalcleaned: 0\n    };\n    _this.onCycleFixed = _this.onCycleFixed.bind(_assertThisInitialized(_this));\n    _this.setStateSynchronous = _this.setStateSynchronous.bind(_assertThisInitialized(_this));\n    _this.handler3 = _this.handler3.bind(_assertThisInitialized(_this));\n    _this.setPlant = _this.setPlant.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PlantStats, [{\n    key: \"setStateSynchronous\",\n    value: function setStateSynchronous(stateUpdate) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.setState(stateUpdate, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (!this.props.signedIn) {\n        this.setState({\n          redirect: true\n        });\n      }\n\n      if (this.props.role === 'admin') {\n        fetch(\"http://localhost:3000/check-cycle\", {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            plant: this.state.plant\n          })\n        }).then(function (resp) {\n          return resp.json();\n        }).then(function (hell) {\n          if (hell['body'] === 1) {\n            var p = prompt('The Cycle has been completed,shall you want the cycle to start from today. Enter Y to start');\n\n            if (p === 'Y') {\n              var a = prompt('The Cycle will be completed within:(no of days)');\n              fetch(\"http://localhost:3000/create-cycle\", {\n                method: 'post',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                  plant: _this3.state.plant,\n                  startToday: hell['body'],\n                  estimatedDuration: a\n                })\n              }).then(function (data) {\n                return alert('Success');\n              });\n            }\n          }\n        }).catch(function (err) {\n          return console.log(err);\n        });\n      }\n\n      fetch('http://localhost:3000/get-cycle-data', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var startDate = data.startDate,\n            endDate = data.endDate,\n            currentCycle = data.currentCycle,\n            duration = data.duration;\n\n        _this3.setStateSynchronous({\n          startDate: startDate,\n          endDate: endDate,\n          number: currentCycle,\n          duration: duration\n        }).then(function (bek) {\n          var date = new Date();\n          var date1 = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n          fetch('http://localhost:3000/getplant', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              plant: _this3.state.plant,\n              startDate: _this3.state.startDate,\n              presentDate: date1,\n              cycle: _this3.state.number\n            })\n          }).then(function (hel) {\n            return hel.json();\n          }).then(function (lol) {\n            function compare(a, b) {\n              if (a.date > b.date) return 1;\n              if (b.date > a.date) return -1;\n              return 0;\n            }\n\n            lol['data'].sort(compare);\n\n            _this3.setStateSynchronous({\n              data: lol['data'],\n              totalmodules: lol['totalmodules']\n            }).then(function (jelly) {\n              var beo = [];\n\n              _this3.state.data.map(function (hello, i) {\n                return beo.push({\n                  'date': hello['date'],\n                  'today_cleaned': Math.floor(_this3.state.totalmodules / _this3.state.duration)\n                });\n              });\n\n              function compare(a, b) {\n                if (a.date > b.date) return 1;\n                if (b.date > a.date) return -1;\n                return 0;\n              }\n\n              beo.sort(compare);\n\n              _this3.setStateSynchronous({\n                data1: beo\n              });\n            });\n          }).then(function (help) {\n            var cleaned_till_date = 0;\n\n            for (var i = 0; i < _this3.state.data.length; i++) {\n              cleaned_till_date += _this3.state.data[i].today_cleaned;\n            }\n\n            _this3.setState({\n              totalcleaned: cleaned_till_date\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"handler3\",\n    value: function handler3() {\n      var body = document.getElementById('hello1');\n      body.classList.toggle('fill');\n    }\n  }, {\n    key: \"setPlant\",\n    value: function setPlant(plant) {\n      this.setState({\n        plant: plant\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var items = [];\n\n      for (var i = 1; i < this.state.number; i++) {\n        items.push(React.createElement(\"option\", {\n          value: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224\n          },\n          __self: this\n        }, i));\n      }\n\n      items.push(React.createElement(\"option\", {\n        value: this.state.number,\n        selected: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, this.state.number));\n\n      if (this.state.redirect) {\n        alert(\"SignIn to Access the Info\");\n        return React.createElement(Redirect, {\n          to: \"/signin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(FinalNav, {\n        fname: this.props.fname,\n        role: this.props.role,\n        plants: this.props.plants,\n        pr: this.pr,\n        handler: this.props.handler,\n        number: this.state.number,\n        startDate: this.state.startDate,\n        endDate: this.state.endDate,\n        plantstats: true,\n        handle: this.handler3,\n        setplant: this.setPlant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"hello1\",\n        className: \"fill\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \"Select cycle\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        name: \"cycleNumber\",\n        onChange: this.onCycleFixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, \" \", items)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \"Actual Cleaned vs Date\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        width: 730,\n        height: 250,\n        data: this.state.data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 30\n        },\n        syncId: \"hell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        dataKey: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(Label, {\n        value: \"Date\",\n        offset: -10,\n        position: \"insideBottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      })), React.createElement(YAxis, {\n        label: {\n          value: 'Total Modules Cleaned',\n          offset: 0,\n          angle: -90,\n          position: 'insideBottomLeft'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"linear\",\n        dataKey: \"today_cleaned\",\n        stroke: \"#003157\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, \"Expected Cleaned vs Date\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        width: 730,\n        height: 250,\n        data: this.state.data1,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        syncId: \"hell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        dataKey: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"linear\",\n        dataKey: \"today_cleaned\",\n        stroke: \"#000000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }), React.createElement(Brush, {\n        height: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, \"Total Modules Cleaned Till Date : \", this.state.totalcleaned, \" Out of \", this.state.totalmodules), React.createElement(LinearStatic, {\n        progress: Math.floor(this.state.totalcleaned / this.state.totalmodules * 100),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        id: \"green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \" Modules Completed\"), React.createElement(\"span\", {\n        id: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, \" Modules Not Completed\")));\n    }\n  }, {\n    key: \"onCycleFixed\",\n    value: function onCycleFixed(e) {\n      var _this4 = this;\n\n      e.preventDefault();\n      this.setStateSynchronous({\n        current: Number(e.target.value)\n      }).then(function (bro) {\n        var date = new Date();\n        var date1 = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n        fetch('http://localhost:3000/getplant', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            plant: _this4.state.plant,\n            startDate: _this4.state.startDate,\n            presentDate: date1,\n            cycle: _this4.state.current\n          })\n        }).then(function (hel) {\n          return hel.json();\n        }).then(function (lol) {\n          function compare(a, b) {\n            if (a.date > b.date) return 1;\n            if (b.date > a.date) return -1;\n            return 0;\n          }\n\n          lol['data'].sort(compare);\n\n          _this4.setStateSynchronous({\n            data: lol['data'],\n            totalmodules: lol['totalmodules']\n          }).then(function (jelly) {\n            var beo = [];\n\n            _this4.state.data.map(function (hello, i) {\n              return beo.push({\n                'date': hello['date'],\n                'today_cleaned': Math.floor(_this4.state.totalmodules / _this4.state.duration)\n              });\n            });\n\n            function compare(a, b) {\n              if (a.date > b.date) return 1;\n              if (b.date > a.date) return -1;\n              return 0;\n            }\n\n            beo.sort(compare);\n\n            _this4.setStateSynchronous({\n              data1: beo\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return PlantStats;\n}(Component);\n\nexport default withRouter(PlantStats);","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/plantstats/plantstats.js"],"names":["React","Component","$","Popper","FinalNav","Redirect","withRouter","LineChart","Line","Label","Legend","AreaChart","Area","Brush","XAxis","YAxis","CartesianGrid","Tooltip","Typography","LinearStatic","PlantStats","props","pr","cycle","number","select","startDate","endDate","state","duration","current","redirect","plant","plants","split","toLowerCase","totalmodules","data","data1","totalcleaned","onCycleFixed","bind","setStateSynchronous","handler3","setPlant","stateUpdate","Promise","resolve","setState","signedIn","role","fetch","method","headers","body","JSON","stringify","then","resp","json","hell","p","prompt","a","startToday","estimatedDuration","alert","catch","err","console","log","res","currentCycle","bek","date","Date","date1","getFullYear","getMonth","slice","getDate","presentDate","hel","lol","compare","b","sort","jelly","beo","map","hello","i","push","Math","floor","help","cleaned_till_date","length","today_cleaned","document","getElementById","classList","toggle","items","fname","handler","top","right","left","bottom","value","offset","angle","position","e","preventDefault","Number","target","bro"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './plantstats.css'\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport {Redirect, withRouter} from \"react-router\";\nimport {LineChart, Line, Label , Legend, AreaChart, Area, Brush, XAxis, YAxis, CartesianGrid, Tooltip} from 'recharts';\nimport {Typography} from \"@material-ui/core\";\nimport LinearStatic from '../../Card/Progress/progress';\n\nclass PlantStats extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            number : 14,\n            duration : 0,\n            current: 0,\n            startDate: '16/10/2019',\n            endDate: '1/11/2019',\n            redirect : false,\n            plant : this.props.plants.split('&')[0].toLowerCase(),\n            totalmodules : 0,\n            data : [\n                {\n                    \"name\": \"Page A\",\n                    \"uv\": 4000,\n                    \"pv\": 2400,\n                    \"amt\": 2400\n                },\n                {\n                    \"name\": \"Page B\",\n                    \"uv\": 3000,\n                    \"pv\": 1398,\n                    \"amt\": 2210\n                },\n                {\n                    \"name\": \"Page C\",\n                    \"uv\": 2000,\n                    \"pv\": 9800,\n                    \"amt\": 2290\n                },\n                {\n                    \"name\": \"Page D\",\n                    \"uv\": 2780,\n                    \"pv\": 3908,\n                    \"amt\": 2000\n                },\n                {\n                    \"name\": \"Page E\",\n                    \"uv\": 1890,\n                    \"pv\": 4800,\n                    \"amt\": 2181\n                },\n                {\n                    \"name\": \"Page F\",\n                    \"uv\": 2390,\n                    \"pv\": 3800,\n                    \"amt\": 2500\n                },\n                {\n                    \"name\": \"Page G\",\n                    \"uv\": 3490,\n                    \"pv\": 4300,\n                    \"amt\": 2100\n                }\n            ],\n            data1 : [],\n            totalcleaned : 0,\n        };\n        this.onCycleFixed = this.onCycleFixed.bind(this);\n        this.setStateSynchronous = this.setStateSynchronous.bind(this);\n        this.handler3 = this.handler3.bind(this);\n        this.setPlant = this.setPlant.bind(this);\n    }\n\n    setStateSynchronous(stateUpdate) {\n        return new Promise(resolve => {\n            this.setState(stateUpdate, () => resolve());\n        });\n    }\n\n    pr = {\n        cycle : `<div><span>Current Cycle - </span><strong>${this.props.number}</strong></div>`,\n        select : ``,\n        startDate : \"<div><span>StartDate - </span><strong>\"+this.props.startDate+\"</strong></div>\",\n        endDate : \"<div><span>ExpectedEndDate - </span><strong>\"+this.props.endDate+\"</strong></div>\",\n    };\n\n    componentDidMount() {\n        if (!this.props.signedIn) {\n            this.setState({\n                redirect: true,\n            });\n        }\n        if(this.props.role === 'admin')\n        {\n            fetch(\"http://localhost:3000/check-cycle\",{\n                method : 'post',\n                headers : {\n                    'Content-Type' : 'application/json',\n                },\n                body : JSON.stringify({\n                    plant : this.state.plant,\n                })\n            })\n                .then(resp=> resp.json())\n                .then( hell =>\n                {\n                    if(hell['body'] === 1){\n                        const p = prompt('The Cycle has been completed,shall you want the cycle to start from today. Enter Y to start');\n                        if(p === 'Y')\n                        {\n                            const a = prompt('The Cycle will be completed within:(no of days)');\n                            fetch(\"http://localhost:3000/create-cycle\",\n                                {\n                                    method : 'post',\n                                    headers : {\n                                        'Content-Type' : 'application/json',\n                                    },\n                                    body : JSON.stringify({\n                                        plant : this.state.plant,\n                                        startToday : hell['body'],\n                                        estimatedDuration : a,\n                                    })\n                                }\n                            ).then(data => alert('Success'))\n                        }\n                    }\n                })\n                .catch(err=>console.log(err));\n        }\n        fetch('http://localhost:3000/get-cycle-data',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                plant : this.state.plant,\n            })\n        })\n            .then(res=>res.json())\n            .then(data=>{\n                let { startDate,endDate,currentCycle,duration } = data;\n                this.setStateSynchronous({\n                    startDate: startDate,\n                    endDate: endDate,\n                    number: currentCycle,\n                    duration : duration,\n                }).then(bek =>{\n                    const date = new Date();\n                    let date1 = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n                    fetch('http://localhost:3000/getplant',{\n                        method : 'post',\n                        headers : {\n                            'Content-Type' : 'application/json',\n                        },\n                        body : JSON.stringify({\n                            plant : this.state.plant,\n                            startDate : this.state.startDate,\n                            presentDate : date1,\n                            cycle : this.state.number,\n                        })\n                    })\n                        .then(hel => hel.json())\n                        .then(lol=>{\n                            function compare(a, b){\n                                if (a.date > b.date) return 1;\n                                if (b.date > a.date) return -1;\n                                return 0;\n                            }\n                            lol['data'].sort(compare);\n                            this.setStateSynchronous({\n                                data : lol['data'],\n                                totalmodules : lol['totalmodules'],\n                            }).then(jelly =>{\n                                let beo = [];\n                                this.state.data.map((hello, i) => {\n                                    return beo.push({\n                                        'date' : hello['date'],\n                                        'today_cleaned' : Math.floor(this.state.totalmodules/this.state.duration),\n                                    });\n                                });\n                                function compare(a, b){\n                                    if (a.date > b.date) return 1;\n                                    if (b.date > a.date) return -1;\n                                    return 0;\n                                }\n                                beo.sort(compare);\n                                this.setStateSynchronous({\n                                    data1 : beo,\n                                });\n                            });\n                        }).then(help =>{\n                        let cleaned_till_date = 0;\n                        for(let i=0;i<this.state.data.length;i++)\n                        {\n                            cleaned_till_date += this.state.data[i].today_cleaned;\n                        }\n                        this.setState({\n                            totalcleaned : cleaned_till_date,\n                        });\n                        });\n                });\n            });\n}\n\n    handler3(){\n        let body = document.getElementById('hello1');\n        body.classList.toggle('fill');\n    }\n\n    setPlant(plant){\n        this.setState({\n            plant : plant,\n        });\n    }\n\n    render() {\n        let items = [];\n        for (let i=1;i<this.state.number;i++) {\n            items.push(<option value={i}>{i}</option>);\n        }\n        items.push(<option value={this.state.number} selected>{this.state.number}</option>);\n        if(this.state.redirect){\n            alert(\"SignIn to Access the Info\");\n            return <Redirect to='/signin'/>\n        }\n\n        return(\n            <div>\n                <FinalNav fname={this.props.fname}\n                          role={this.props.role}\n                          plants={this.props.plants}\n                          pr={this.pr}\n                          handler = {this.props.handler}\n                          number={this.state.number}\n                          startDate={this.state.startDate}\n                          endDate={this.state.endDate}\n                          plantstats={true}\n                          handle={this.handler3}\n                          setplant={this.setPlant}\n                />\n                <div id=\"hello1\" className='fill'>\n                    <div><span><strong>Select cycle</strong></span><select className=\"form-control\" name='cycleNumber' onChange={this.onCycleFixed}> {items}</select></div><br/>\n                    <h5>Actual Cleaned vs Date</h5> <br/>\n                    <LineChart width={730} height={250} data={this.state.data}\n                               margin={{ top: 5, right: 30, left: 20, bottom: 30 }} syncId='hell'>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\">\n                            <Label value=\"Date\" offset={-10} position=\"insideBottom\" />\n                        </XAxis>\n                        <YAxis  label={{ value: 'Total Modules Cleaned', offset:0,angle: -90, position: 'insideBottomLeft' }}/>\n                        <Tooltip />\n                        <Line type=\"linear\" dataKey=\"today_cleaned\" stroke=\"#003157\" />\n                    </LineChart>\n                    <br/>\n                    <h5>Expected Cleaned vs Date</h5> <br/>\n                    <LineChart width={730} height={250} data={this.state.data1}\n                               margin={{ top: 5, right: 30, left: 20, bottom: 5 }} syncId='hell'>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Line type=\"linear\" dataKey=\"today_cleaned\" stroke=\"#000000\"/>\n                        <Brush height={20}/>\n                    </LineChart>\n                    <br/>\n                    <Typography variant='body2'>Total Modules Cleaned Till Date : {this.state.totalcleaned} Out of {this.state.totalmodules}</Typography>\n                    <LinearStatic\n                        progress={Math.floor((this.state.totalcleaned/this.state.totalmodules)*100)}\n                    />\n                    <span id='green' /><Typography> Modules Completed</Typography>\n                    <span id='red' /><Typography> Modules Not Completed</Typography>\n                </div>\n            </div>\n        );\n    }\n\n    onCycleFixed(e) {\n        e.preventDefault();\n        this.setStateSynchronous(({current: Number(e.target.value)})).then( bro => {\n                const date = new Date();\n                let date1 = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n                fetch('http://localhost:3000/getplant',{\n                    method : 'post',\n                    headers : {\n                        'Content-Type' : 'application/json',\n                    },\n                    body : JSON.stringify({\n                        plant : this.state.plant,\n                        startDate : this.state.startDate,\n                        presentDate : date1,\n                        cycle : this.state.current,\n                    })\n                })\n                    .then(hel => hel.json())\n                    .then(lol=>{\n                        function compare(a, b){\n                            if (a.date > b.date) return 1;\n                            if (b.date > a.date) return -1;\n                            return 0;\n                        }\n                        lol['data'].sort(compare);\n                        this.setStateSynchronous({\n                            data : lol['data'],\n                            totalmodules : lol['totalmodules'],\n                        }).then(jelly =>{\n                            let beo = [];\n                            this.state.data.map((hello, i) => {\n                                return beo.push({\n                                    'date' : hello['date'],\n                                    'today_cleaned' : Math.floor(this.state.totalmodules/this.state.duration),\n                                });\n                            });\n                            function compare(a, b){\n                                if (a.date > b.date) return 1;\n                                if (b.date > a.date) return -1;\n                                return 0;\n                            }\n                            beo.sort(compare);\n                            this.setStateSynchronous({\n                                data1 : beo,\n                            });\n                        });\n                    });\n        }\n        )\n    }\n}\n\nexport default withRouter(PlantStats);\n\n\n"]},"metadata":{},"sourceType":"module"}