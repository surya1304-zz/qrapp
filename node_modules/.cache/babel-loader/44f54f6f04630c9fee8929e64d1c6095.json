{"ast":null,"code":"(function ($) {\n  $.fn.qrcode = function (options) {\n    // if options is string, \n    if (typeof options === 'string') {\n      options = {\n        text: options\n      };\n    } // set default values\n    // typeNumber < 1 for automatic calculation\n\n\n    options = $.extend({}, {\n      render: \"canvas\",\n      width: 256,\n      height: 256,\n      typeNumber: -1,\n      correctLevel: QRErrorCorrectLevel.H,\n      background: \"#ffffff\",\n      foreground: \"#000000\"\n    }, options);\n\n    var createCanvas = function createCanvas() {\n      // create the qrcode itself\n      var qrcode = new QRCode(options.typeNumber, options.correctLevel);\n      qrcode.addData(options.text);\n      qrcode.make(); // create canvas element\n\n      var canvas = document.createElement('canvas');\n      canvas.width = options.width;\n      canvas.height = options.height;\n      var ctx = canvas.getContext('2d'); // compute tileW/tileH based on options.width/options.height\n\n      var tileW = options.width / qrcode.getModuleCount();\n      var tileH = options.height / qrcode.getModuleCount(); // draw in the canvas\n\n      for (var row = 0; row < qrcode.getModuleCount(); row++) {\n        for (var col = 0; col < qrcode.getModuleCount(); col++) {\n          ctx.fillStyle = qrcode.isDark(row, col) ? options.foreground : options.background;\n          var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n          var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);\n          ctx.fillRect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n        }\n      } // return just built canvas\n\n\n      return canvas;\n    }; // from Jon-Carlos Rivera (https://github.com/imbcmdth)\n\n\n    var createTable = function createTable() {\n      // create the qrcode itself\n      var qrcode = new QRCode(options.typeNumber, options.correctLevel);\n      qrcode.addData(options.text);\n      qrcode.make(); // create table element\n\n      var $table = $('<table></table>').css(\"width\", options.width + \"px\").css(\"height\", options.height + \"px\").css(\"border\", \"0px\").css(\"border-collapse\", \"collapse\").css('background-color', options.background); // compute tileS percentage\n\n      var tileW = options.width / qrcode.getModuleCount();\n      var tileH = options.height / qrcode.getModuleCount(); // draw in the table\n\n      for (var row = 0; row < qrcode.getModuleCount(); row++) {\n        var $row = $('<tr></tr>').css('height', tileH + \"px\").appendTo($table);\n\n        for (var col = 0; col < qrcode.getModuleCount(); col++) {\n          $('<td></td>').css('width', tileW + \"px\").css('background-color', qrcode.isDark(row, col) ? options.foreground : options.background).appendTo($row);\n        }\n      } // return just built canvas\n\n\n      return $table;\n    };\n\n    return this.each(function () {\n      var element = options.render == \"canvas\" ? createCanvas() : createTable();\n      $(element).appendTo(this);\n    });\n  };\n})(jQuery);","map":null,"metadata":{},"sourceType":"script"}