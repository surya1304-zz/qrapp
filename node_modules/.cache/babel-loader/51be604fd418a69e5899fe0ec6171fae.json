{"ast":null,"code":"import _classCallCheck from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/rowstats/rowenquiry.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './textfields.css';\nimport './plantstats.css';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport { Redirect, withRouter } from \"react-router\";\nimport { TextField, Button, Divider, Typography } from '@material-ui/core';\nimport { CloudDownload } from '@material-ui/icons';\nimport RowStats from './rowstats';\nimport ImageGrid from \"../../Card/CleanImages\";\n\nvar RowEnquiry =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(RowEnquiry, _Component);\n\n  function RowEnquiry(props) {\n    var _this;\n\n    _classCallCheck(this, RowEnquiry);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(RowEnquiry).call(this, props));\n    _this.pr = {\n      cycle: \"\",\n      select: \"\",\n      startDate: \"\"\n    };\n    _this.state = {\n      number: 1,\n      zone: 1,\n      row: 1,\n      block: 'A1',\n      inverter: '1.1',\n      SMB: \"1.1.3\",\n      redirect: false,\n      plant: _this.props.plants.split('&')[0].toLowerCase(),\n      startDate: '',\n      endDate: '',\n      cleanedStatus: [],\n      forty: [],\n      updateDate: [],\n      updateTime: [],\n      cardData: [],\n      cycle: 1\n    };\n    _this.onEmailChange = _this.onEmailChange.bind(_assertThisInitialized(_this));\n    _this.onPasswordChange = _this.onPasswordChange.bind(_assertThisInitialized(_this));\n    _this.onBlockChange = _this.onBlockChange.bind(_assertThisInitialized(_this));\n    _this.onInverterChange = _this.onInverterChange.bind(_assertThisInitialized(_this));\n    _this.onSMBChange = _this.onSMBChange.bind(_assertThisInitialized(_this));\n    _this.onButtonClicked = _this.onButtonClicked.bind(_assertThisInitialized(_this));\n    _this.handler2 = _this.handler2.bind(_assertThisInitialized(_this));\n    _this.handler3 = _this.handler3.bind(_assertThisInitialized(_this));\n    _this.setPlant = _this.setPlant.bind(_assertThisInitialized(_this));\n    _this.setStateSynchronous = _this.setStateSynchronous.bind(_assertThisInitialized(_this));\n    _this.getInfo = _this.getInfo.bind(_assertThisInitialized(_this));\n    _this.onButtonClicked1 = _this.onButtonClicked1.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RowEnquiry, [{\n    key: \"setStateSynchronous\",\n    value: function setStateSynchronous(stateUpdate) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.setState(stateUpdate, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (!this.props.signedIn) {\n        this.setState({\n          redirect: true\n        });\n      }\n\n      fetch('http://localhost:3000/get-cycle-data', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var startDate = data.startDate,\n            endDate = data.endDate,\n            currentCycle = data.currentCycle;\n\n        _this3.setState({\n          startDate: startDate,\n          endDate: endDate,\n          number: currentCycle\n        });\n      });\n    }\n  }, {\n    key: \"handler3\",\n    value: function handler3() {\n      if (document.getElementById('hello').style.display !== 'none') {\n        var _body = document.getElementById('hello');\n\n        _body.classList.toggle('fill');\n      } else if (document.getElementById('jel').style.display != 'none') {\n        var _body2 = document.getElementById('jel');\n\n        _body2.classList.toggle('fill');\n      }\n\n      var body = document.getElementById('images');\n      body.classList.toggle('fill');\n    }\n  }, {\n    key: \"setPlant\",\n    value: function setPlant(plant) {\n      this.setState({\n        plant: plant\n      });\n    }\n  }, {\n    key: \"handler2\",\n    value: function handler2(number) {\n      this.setState({\n        number: number\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.redirect) {\n        alert(\"SignIn to Access the Info\");\n        return React.createElement(Redirect, {\n          to: \"/signin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(FinalNav, {\n        fname: this.props.fname,\n        role: this.props.role,\n        plants: this.props.plants,\n        number: this.state.number,\n        pr: this.pr,\n        handler1: this.handler2,\n        plantstats: false,\n        handle: this.handler3,\n        setplant: this.setPlant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"form\", {\n        id: \"hello\",\n        className: \"hello fill\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"bellll\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        required: true,\n        id: \"outlined-zone\",\n        label: \"Zone\",\n        defaultValue: \"1\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.onEmailChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        required: true,\n        id: \"outlined-row\",\n        label: \"Row\",\n        defaultValue: \"1\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.onPasswordChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        required: true,\n        id: \"outlined-block\",\n        label: \"Block Name\",\n        defaultValue: \"A1\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.onBlockChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        required: true,\n        id: \"outlined-inverter\",\n        label: \"Inverter ID\",\n        defaultValue: \"1.1\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.onInverterChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }), React.createElement(TextField, {\n        required: true,\n        className: \"outlined-smb\",\n        label: \"SMB ID\",\n        defaultValue: \"1.1.3\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.onSMBChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.onButtonClicked,\n        variant: \"contained\",\n        className: \"outlined-button\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Get Data\", React.createElement(CloudDownload, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        id: \"jel\",\n        className: \"fill\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"key\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"zone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, \"Zone : \", this.state.zone), React.createElement(\"div\", {\n        className: \"block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, \"Block Name : \", this.state.block), React.createElement(\"div\", {\n        className: \"inverter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, \"Inverter : \", this.state.inverter), React.createElement(\"div\", {\n        className: \"smb\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"SMB : \", this.state.SMB), React.createElement(\"div\", {\n        className: \"rowtype\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, this.state.forty == 1 ? React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Row Type : 40 Module Row\") : React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      }, \"Row Type : 20 Module Row\"))), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"grid11\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, this.state.cards), React.createElement(Button, {\n        onClick: this.onButtonClicked2,\n        variant: \"contained\",\n        className: \"outlined-button\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Get Data For another Row\")), React.createElement(\"div\", {\n        id: \"images\",\n        className: \"fill\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(ImageGrid, {\n        tileData: this.state.cardData,\n        cyc: this.state.cycle,\n        oncl: this.onButtonClicked1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onEmailChange\",\n    value: function onEmailChange(event) {\n      this.setState({\n        zone: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(event) {\n      this.setState({\n        row: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onBlockChange\",\n    value: function onBlockChange(event) {\n      this.setState({\n        block: event.target.value.toString()\n      });\n    }\n  }, {\n    key: \"onInverterChange\",\n    value: function onInverterChange(event) {\n      this.setState({\n        inverter: event.target.value.toString()\n      });\n    }\n  }, {\n    key: \"onSMBChange\",\n    value: function onSMBChange(event) {\n      this.setState({\n        SMB: event.target.value.toString()\n      });\n    }\n  }, {\n    key: \"onButtonClicked\",\n    value: function onButtonClicked(e) {\n      var _this4 = this;\n\n      e.preventDefault();\n      fetch('http://localhost:3000/rowstats', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant,\n          date: this.state.startDate,\n          zone: this.state.zone,\n          row: this.state.row,\n          block: this.state.block,\n          inverter: this.state.inverter,\n          SMB: this.state.SMB,\n          cycle: this.state.number\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (kill) {\n        var q = [];\n        var w = [];\n        var e = [];\n        var r = [];\n        kill.map(function (killa, i) {\n          q.push(killa['_cleanstatus']);\n          w.push(killa['_40mod']);\n          e.push(killa['updateDate']);\n          r.push(killa['updateTime']);\n        });\n\n        _this4.setStateSynchronous({\n          cleanedStatus: q,\n          forty: w[0],\n          updateDate: e,\n          updateTime: r\n        }).then(function (letr) {\n          var dark = [];\n\n          for (var i = 0; i < _this4.state.cleanedStatus.length; i++) {\n            dark.push(React.createElement(RowStats, {\n              cycle: i + 1,\n              cleanStatus: _this4.state.cleanedStatus[i],\n              updateDate: _this4.state.updateDate[i],\n              updateTime: _this4.state.updateTime[i],\n              getinfo: _this4.getInfo,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 294\n              },\n              __self: this\n            }));\n          }\n\n          _this4.setStateSynchronous({\n            cards: dark\n          });\n        });\n      }).then(function (happy) {\n        document.getElementById('hello').style.display = 'none';\n        document.getElementById('jel').style.display = 'grid';\n        document.getElementById('images').style.display = 'none';\n      });\n    }\n  }, {\n    key: \"onButtonClicked1\",\n    value: function onButtonClicked1() {\n      this.setStateSynchronous({\n        cardData: []\n      });\n      document.getElementById('hello').style.display = 'none';\n      document.getElementById('jel').style.display = 'grid';\n      document.getElementById('images').style.display = 'none';\n    }\n  }, {\n    key: \"onButtonClicked2\",\n    value: function onButtonClicked2() {\n      document.getElementById('hello').style.display = 'flex';\n      document.getElementById('jel').style.display = 'none';\n      document.getElementById('images').style.display = 'none';\n    }\n  }, {\n    key: \"getInfo\",\n    value: function getInfo(cyc) {\n      var _this5 = this;\n\n      var dat = [];\n      fetch('http://localhost:3000/getimages', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant,\n          cycle: cyc,\n          zone: this.state.zone,\n          row: this.state.row,\n          block: this.state.block,\n          inverter: this.state.inverter,\n          smb: this.state.SMB,\n          date: this.state.startDate\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (hello) {\n        console.log(hello);\n        dat.push({\n          img: hello.precleaned,\n          title: 'Pre Cleaned Image'\n        });\n        dat.push({\n          img: hello.postcleaned,\n          title: 'Post Cleaned Image'\n        });\n\n        _this5.setStateSynchronous({\n          cardData: dat,\n          cycle: cyc\n        }).then(function (naan) {\n          document.getElementById('hello').style.display = 'none';\n          document.getElementById('jel').style.display = 'none';\n          document.getElementById('images').style.display = 'flex';\n        });\n      });\n    }\n  }]);\n\n  return RowEnquiry;\n}(Component);\n\nexport default withRouter(RowEnquiry);","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/rowstats/rowenquiry.js"],"names":["React","Component","$","Popper","FinalNav","Redirect","withRouter","TextField","Button","Divider","Typography","CloudDownload","RowStats","ImageGrid","RowEnquiry","props","pr","cycle","select","startDate","state","number","zone","row","block","inverter","SMB","redirect","plant","plants","split","toLowerCase","endDate","cleanedStatus","forty","updateDate","updateTime","cardData","onEmailChange","bind","onPasswordChange","onBlockChange","onInverterChange","onSMBChange","onButtonClicked","handler2","handler3","setPlant","setStateSynchronous","getInfo","onButtonClicked1","stateUpdate","Promise","resolve","setState","signedIn","fetch","method","headers","body","JSON","stringify","then","res","json","data","currentCycle","document","getElementById","style","display","classList","toggle","alert","fname","role","cards","onButtonClicked2","event","Number","target","value","toString","e","preventDefault","date","kill","q","w","r","map","killa","i","push","letr","dark","length","happy","cyc","dat","smb","hello","console","log","img","precleaned","title","postcleaned","naan"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './textfields.css';\nimport './plantstats.css';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport {Redirect, withRouter} from \"react-router\";\nimport {TextField, Button, Divider, Typography} from '@material-ui/core';\nimport {CloudDownload} from '@material-ui/icons';\nimport RowStats from './rowstats';\nimport ImageGrid from \"../../Card/CleanImages\";\n\n\nclass RowEnquiry extends Component{\n    constructor(props) {\n        super(props);\n        this.state =\n            {\n                number : 1,\n                zone : 1,\n                row : 1,\n                block : 'A1',\n                inverter : '1.1',\n                SMB: \"1.1.3\",\n                redirect : false,\n                plant : this.props.plants.split('&')[0].toLowerCase(),\n                startDate : '',\n                endDate: '',\n                cleanedStatus : [],\n                forty : [],\n                updateDate : [],\n                updateTime : [],\n                cardData : [],\n                cycle : 1,\n            };\n        this.onEmailChange = this.onEmailChange.bind(this);\n        this.onPasswordChange = this.onPasswordChange.bind(this);\n        this.onBlockChange = this.onBlockChange.bind(this);\n        this.onInverterChange = this.onInverterChange.bind(this);\n        this.onSMBChange = this.onSMBChange.bind(this);\n        this.onButtonClicked = this.onButtonClicked.bind(this);\n        this.handler2 = this.handler2.bind(this);\n        this.handler3 = this.handler3.bind(this);\n        this.setPlant = this.setPlant.bind(this);\n        this.setStateSynchronous = this.setStateSynchronous.bind(this);\n        this.getInfo = this.getInfo.bind(this);\n        this.onButtonClicked1 = this.onButtonClicked1.bind(this);\n    }\n\n    setStateSynchronous(stateUpdate) {\n        return new Promise(resolve => {\n            this.setState(stateUpdate, () => resolve());\n        });\n    }\n\n    pr = {\n        cycle : \"\",\n        select : \"\",\n        startDate : \"\",\n    };\n\n    componentDidMount() {\n        if(!this.props.signedIn){\n            this.setState({\n                redirect : true,\n            });\n        }\n\n        fetch('http://localhost:3000/get-cycle-data',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                plant : this.state.plant,\n            })\n        })\n            .then(res=>res.json())\n            .then(data=>{\n                let { startDate,endDate,currentCycle } = data;\n                this.setState({\n                    startDate: startDate,\n                    endDate: endDate,\n                    number: currentCycle,\n                });\n            })\n    }\n\n    handler3(){\n        if(document.getElementById('hello').style.display !== 'none'){\n            let body = document.getElementById('hello');\n            body.classList.toggle('fill');\n        }\n        else if(document.getElementById('jel').style.display != 'none'){\n            let body = document.getElementById('jel');\n            body.classList.toggle('fill');\n        }\n        let body = document.getElementById('images');\n        body.classList.toggle('fill');\n    }\n\n    setPlant(plant){\n        this.setState({\n            plant : plant,\n        });\n    }\n\n    handler2(number){\n        this.setState({\n            number: number,\n        });\n    }\n\n    render() {\n        if(this.state.redirect){\n            alert(\"SignIn to Access the Info\");\n            return <Redirect to='/signin'/>\n        }\n\n        return (\n            <div>\n                <FinalNav fname={this.props.fname}\n                          role={this.props.role}\n                          plants={this.props.plants}\n                          number={this.state.number}\n                          pr={this.pr}\n                          handler1={this.handler2}\n                          plantstats={false}\n                          handle={this.handler3}\n                          setplant={this.setPlant}\n                />\n                    <form id='hello' className='hello fill'>\n                        <div className=\"bellll\">\n                            <TextField\n                                required\n                                id=\"outlined-zone\"\n                                label=\"Zone\"\n                                defaultValue=\"1\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={this.onEmailChange}\n                            />\n                            <TextField\n                                required\n                                id=\"outlined-row\"\n                                label=\"Row\"\n                                defaultValue=\"1\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={this.onPasswordChange}\n                            />\n                            <TextField\n                                required\n                                id=\"outlined-block\"\n                                label=\"Block Name\"\n                                defaultValue=\"A1\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={this.onBlockChange}\n                            />\n                            <TextField\n                                required\n                                id=\"outlined-inverter\"\n                                label=\"Inverter ID\"\n                                defaultValue=\"1.1\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={this.onInverterChange}\n                            />\n                            <TextField\n                                required\n                                className=\"outlined-smb\"\n                                label=\"SMB ID\"\n                                defaultValue=\"1.1.3\"\n                                margin=\"normal\"\n                                variant=\"outlined\"\n                                onChange={this.onSMBChange}\n                            />\n                            <Button onClick={this.onButtonClicked} variant=\"contained\" className=\"outlined-button\" color=\"primary\">\n                                Get Data\n                                <CloudDownload />\n                            </Button>\n                        </div>\n                    </form>\n                <div id='jel' className='fill'>\n                    <div className='key'>\n                        <div className='zone'>\n                            Zone : {this.state.zone}\n                        </div>\n                        <div className='block'>\n                            Block Name : {this.state.block}\n                        </div>\n                        <div className='inverter'>\n                            Inverter : {this.state.inverter}\n                        </div>\n                        <div className='smb'>\n                            SMB : {this.state.SMB}\n                        </div>\n                        <div className='rowtype'>\n                            {\n                                (this.state.forty==1) ? <h6>Row Type : 40 Module Row</h6> : <h6>Row Type : 20 Module Row</h6>\n                            }\n                        </div>\n                    </div>\n                    <Divider />\n                    <div className='grid11'>\n                        {this.state.cards}\n                    </div>\n                    <Button onClick={this.onButtonClicked2} variant=\"contained\" className=\"outlined-button\" color=\"primary\">\n                        Get Data For another Row\n                    </Button>\n                </div>\n                <div id='images' className='fill'>\n                    <ImageGrid\n                        tileData={this.state.cardData}\n                        cyc={this.state.cycle}\n                        oncl={this.onButtonClicked1}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    onEmailChange(event) {\n        this.setState(\n            {zone : Number(event.target.value)},\n        );\n    }\n\n    onPasswordChange(event) {\n        this.setState(\n            {row : Number(event.target.value)},\n        );\n    }\n\n    onBlockChange(event) {\n        this.setState(\n            {block : event.target.value.toString()},\n        );\n    }\n\n    onInverterChange(event) {\n        this.setState(\n            {inverter : event.target.value.toString()},\n        );\n    }\n\n    onSMBChange(event) {\n        this.setState(\n            {SMB : event.target.value.toString()},\n        );\n    }\n\n    onButtonClicked(e){\n        e.preventDefault();\n        fetch('http://localhost:3000/rowstats',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                plant : this.state.plant,\n                date : this.state.startDate,\n                zone : this.state.zone,\n                row : this.state.row,\n                block : this.state.block,\n                inverter : this.state.inverter,\n                SMB : this.state.SMB,\n                cycle : this.state.number\n            })\n        }).then(res => res.json())\n            .then(kill => {\n                let q = [];\n                let w = [];\n                let e = [];\n                let r = [];\n                kill.map((killa,i)=>{\n                    q.push(killa['_cleanstatus']);\n                    w.push(killa['_40mod']);\n                    e.push(killa['updateDate']);\n                    r.push(killa['updateTime']);\n                });\n                this.setStateSynchronous({\n                    cleanedStatus : q,\n                    forty : w[0],\n                    updateDate : e,\n                    updateTime : r,\n                }).then(letr => {\n                    let dark = [];\n                    for(let i=0;i<this.state.cleanedStatus.length;i++)\n                    {\n                        dark.push(<RowStats\n                            cycle={i+1}\n                            cleanStatus={this.state.cleanedStatus[i]}\n                            updateDate={this.state.updateDate[i]}\n                            updateTime={this.state.updateTime[i]}\n                            getinfo={this.getInfo}\n                        />);\n                    }\n                    this.setStateSynchronous({\n                        cards : dark,\n                    });\n                });\n            })\n            .then(happy=>{\n                document.getElementById('hello').style.display = 'none';\n                document.getElementById('jel').style.display = 'grid';\n                document.getElementById('images').style.display = 'none';\n            });\n    }\n\n    onButtonClicked1(){\n        this.setStateSynchronous({\n            cardData : [],\n        });\n        document.getElementById('hello').style.display = 'none';\n        document.getElementById('jel').style.display = 'grid';\n        document.getElementById('images').style.display = 'none';\n    }\n\n    onButtonClicked2(){\n        document.getElementById('hello').style.display = 'flex';\n        document.getElementById('jel').style.display = 'none';\n        document.getElementById('images').style.display = 'none';\n    }\n\n    getInfo(cyc) {\n        let dat = [];\n        fetch('http://localhost:3000/getimages',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body: JSON.stringify({\n                plant : this.state.plant,\n                cycle : cyc,\n                zone : this.state.zone,\n                row : this.state.row,\n                block : this.state.block,\n                inverter : this.state.inverter,\n                smb : this.state.SMB,\n                date : this.state.startDate,\n            })\n        })\n            .then(res => res.json())\n            .then(hello => {\n                console.log(hello);\n                dat.push({\n                    img : hello.precleaned,\n                    title : 'Pre Cleaned Image',\n                });\n                dat.push({\n                    img : hello.postcleaned,\n                    title : 'Post Cleaned Image',\n                });\n                this.setStateSynchronous({\n                    cardData: dat,\n                    cycle : cyc\n                })\n                    .then(naan=>{\n                        document.getElementById('hello').style.display = 'none';\n                        document.getElementById('jel').style.display = 'none';\n                        document.getElementById('images').style.display = 'flex';\n                    });\n            });\n    }\n}\n\nexport default withRouter(RowEnquiry);"]},"metadata":{},"sourceType":"module"}