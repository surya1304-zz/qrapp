{"ast":null,"code":"(function (r) {\n  r.fn.qrcode = function (h) {\n    var s;\n\n    function u(a) {\n      this.mode = s;\n      this.data = a;\n    }\n\n    function o(a, c) {\n      this.typeNumber = a;\n      this.errorCorrectLevel = c;\n      this.modules = null;\n      this.moduleCount = 0;\n      this.dataCache = null;\n      this.dataList = [];\n    }\n\n    function q(a, c) {\n      if (void 0 == a.length) throw Error(a.length + \"/\" + c);\n\n      for (var d = 0; d < a.length && 0 == a[d];) {\n        d++;\n      }\n\n      this.num = Array(a.length - d + c);\n\n      for (var b = 0; b < a.length - d; b++) {\n        this.num[b] = a[b + d];\n      }\n    }\n\n    function p(a, c) {\n      this.totalCount = a;\n      this.dataCount = c;\n    }\n\n    function t() {\n      this.buffer = [];\n      this.length = 0;\n    }\n\n    u.prototype = {\n      getLength: function getLength() {\n        return this.data.length;\n      },\n      write: function write(a) {\n        for (var c = 0; c < this.data.length; c++) {\n          a.put(this.data.charCodeAt(c), 8);\n        }\n      }\n    };\n    o.prototype = {\n      addData: function addData(a) {\n        this.dataList.push(new u(a));\n        this.dataCache = null;\n      },\n      isDark: function isDark(a, c) {\n        if (0 > a || this.moduleCount <= a || 0 > c || this.moduleCount <= c) throw Error(a + \",\" + c);\n        return this.modules[a][c];\n      },\n      getModuleCount: function getModuleCount() {\n        return this.moduleCount;\n      },\n      make: function make() {\n        if (1 > this.typeNumber) {\n          for (var a = 1, a = 1; 40 > a; a++) {\n            for (var c = p.getRSBlocks(a, this.errorCorrectLevel), d = new t(), b = 0, e = 0; e < c.length; e++) {\n              b += c[e].dataCount;\n            }\n\n            for (e = 0; e < this.dataList.length; e++) {\n              c = this.dataList[e], d.put(c.mode, 4), d.put(c.getLength(), j.getLengthInBits(c.mode, a)), c.write(d);\n            }\n\n            if (d.getLengthInBits() <= 8 * b) break;\n          }\n\n          this.typeNumber = a;\n        }\n\n        this.makeImpl(!1, this.getBestMaskPattern());\n      },\n      makeImpl: function makeImpl(a, c) {\n        this.moduleCount = 4 * this.typeNumber + 17;\n        this.modules = Array(this.moduleCount);\n\n        for (var d = 0; d < this.moduleCount; d++) {\n          this.modules[d] = Array(this.moduleCount);\n\n          for (var b = 0; b < this.moduleCount; b++) {\n            this.modules[d][b] = null;\n          }\n        }\n\n        this.setupPositionProbePattern(0, 0);\n        this.setupPositionProbePattern(this.moduleCount - 7, 0);\n        this.setupPositionProbePattern(0, this.moduleCount - 7);\n        this.setupPositionAdjustPattern();\n        this.setupTimingPattern();\n        this.setupTypeInfo(a, c);\n        7 <= this.typeNumber && this.setupTypeNumber(a);\n        null == this.dataCache && (this.dataCache = o.createData(this.typeNumber, this.errorCorrectLevel, this.dataList));\n        this.mapData(this.dataCache, c);\n      },\n      setupPositionProbePattern: function setupPositionProbePattern(a, c) {\n        for (var d = -1; 7 >= d; d++) {\n          if (!(-1 >= a + d || this.moduleCount <= a + d)) for (var b = -1; 7 >= b; b++) {\n            -1 >= c + b || this.moduleCount <= c + b || (this.modules[a + d][c + b] = 0 <= d && 6 >= d && (0 == b || 6 == b) || 0 <= b && 6 >= b && (0 == d || 6 == d) || 2 <= d && 4 >= d && 2 <= b && 4 >= b ? !0 : !1);\n          }\n        }\n      },\n      getBestMaskPattern: function getBestMaskPattern() {\n        for (var a = 0, c = 0, d = 0; 8 > d; d++) {\n          this.makeImpl(!0, d);\n          var b = j.getLostPoint(this);\n          if (0 == d || a > b) a = b, c = d;\n        }\n\n        return c;\n      },\n      createMovieClip: function createMovieClip(a, c, d) {\n        a = a.createEmptyMovieClip(c, d);\n        this.make();\n\n        for (c = 0; c < this.modules.length; c++) {\n          for (var d = 1 * c, b = 0; b < this.modules[c].length; b++) {\n            var e = 1 * b;\n            this.modules[c][b] && (a.beginFill(0, 100), a.moveTo(e, d), a.lineTo(e + 1, d), a.lineTo(e + 1, d + 1), a.lineTo(e, d + 1), a.endFill());\n          }\n        }\n\n        return a;\n      },\n      setupTimingPattern: function setupTimingPattern() {\n        for (var a = 8; a < this.moduleCount - 8; a++) {\n          null == this.modules[a][6] && (this.modules[a][6] = 0 == a % 2);\n        }\n\n        for (a = 8; a < this.moduleCount - 8; a++) {\n          null == this.modules[6][a] && (this.modules[6][a] = 0 == a % 2);\n        }\n      },\n      setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n        for (var a = j.getPatternPosition(this.typeNumber), c = 0; c < a.length; c++) {\n          for (var d = 0; d < a.length; d++) {\n            var b = a[c],\n                e = a[d];\n            if (null == this.modules[b][e]) for (var f = -2; 2 >= f; f++) {\n              for (var i = -2; 2 >= i; i++) {\n                this.modules[b + f][e + i] = -2 == f || 2 == f || -2 == i || 2 == i || 0 == f && 0 == i ? !0 : !1;\n              }\n            }\n          }\n        }\n      },\n      setupTypeNumber: function setupTypeNumber(a) {\n        for (var c = j.getBCHTypeNumber(this.typeNumber), d = 0; 18 > d; d++) {\n          var b = !a && 1 == (c >> d & 1);\n          this.modules[Math.floor(d / 3)][d % 3 + this.moduleCount - 8 - 3] = b;\n        }\n\n        for (d = 0; 18 > d; d++) {\n          b = !a && 1 == (c >> d & 1), this.modules[d % 3 + this.moduleCount - 8 - 3][Math.floor(d / 3)] = b;\n        }\n      },\n      setupTypeInfo: function setupTypeInfo(a, c) {\n        for (var d = j.getBCHTypeInfo(this.errorCorrectLevel << 3 | c), b = 0; 15 > b; b++) {\n          var e = !a && 1 == (d >> b & 1);\n          6 > b ? this.modules[b][8] = e : 8 > b ? this.modules[b + 1][8] = e : this.modules[this.moduleCount - 15 + b][8] = e;\n        }\n\n        for (b = 0; 15 > b; b++) {\n          e = !a && 1 == (d >> b & 1), 8 > b ? this.modules[8][this.moduleCount - b - 1] = e : 9 > b ? this.modules[8][15 - b - 1 + 1] = e : this.modules[8][15 - b - 1] = e;\n        }\n\n        this.modules[this.moduleCount - 8][8] = !a;\n      },\n      mapData: function mapData(a, c) {\n        for (var d = -1, b = this.moduleCount - 1, e = 7, f = 0, i = this.moduleCount - 1; 0 < i; i -= 2) {\n          for (6 == i && i--;;) {\n            for (var g = 0; 2 > g; g++) {\n              if (null == this.modules[b][i - g]) {\n                var n = !1;\n                f < a.length && (n = 1 == (a[f] >>> e & 1));\n                j.getMask(c, b, i - g) && (n = !n);\n                this.modules[b][i - g] = n;\n                e--;\n                -1 == e && (f++, e = 7);\n              }\n            }\n\n            b += d;\n\n            if (0 > b || this.moduleCount <= b) {\n              b -= d;\n              d = -d;\n              break;\n            }\n          }\n        }\n      }\n    };\n    o.PAD0 = 236;\n    o.PAD1 = 17;\n\n    o.createData = function (a, c, d) {\n      for (var c = p.getRSBlocks(a, c), b = new t(), e = 0; e < d.length; e++) {\n        var f = d[e];\n        b.put(f.mode, 4);\n        b.put(f.getLength(), j.getLengthInBits(f.mode, a));\n        f.write(b);\n      }\n\n      for (e = a = 0; e < c.length; e++) {\n        a += c[e].dataCount;\n      }\n\n      if (b.getLengthInBits() > 8 * a) throw Error(\"code length overflow. (\" + b.getLengthInBits() + \">\" + 8 * a + \")\");\n\n      for (b.getLengthInBits() + 4 <= 8 * a && b.put(0, 4); 0 != b.getLengthInBits() % 8;) {\n        b.putBit(!1);\n      }\n\n      for (; !(b.getLengthInBits() >= 8 * a);) {\n        b.put(o.PAD0, 8);\n        if (b.getLengthInBits() >= 8 * a) break;\n        b.put(o.PAD1, 8);\n      }\n\n      return o.createBytes(b, c);\n    };\n\n    o.createBytes = function (a, c) {\n      for (var d = 0, b = 0, e = 0, f = Array(c.length), i = Array(c.length), g = 0; g < c.length; g++) {\n        var n = c[g].dataCount,\n            h = c[g].totalCount - n,\n            b = Math.max(b, n),\n            e = Math.max(e, h);\n        f[g] = Array(n);\n\n        for (var k = 0; k < f[g].length; k++) {\n          f[g][k] = 255 & a.buffer[k + d];\n        }\n\n        d += n;\n        k = j.getErrorCorrectPolynomial(h);\n        n = new q(f[g], k.getLength() - 1).mod(k);\n        i[g] = Array(k.getLength() - 1);\n\n        for (k = 0; k < i[g].length; k++) {\n          h = k + n.getLength() - i[g].length, i[g][k] = 0 <= h ? n.get(h) : 0;\n        }\n      }\n\n      for (k = g = 0; k < c.length; k++) {\n        g += c[k].totalCount;\n      }\n\n      d = Array(g);\n\n      for (k = n = 0; k < b; k++) {\n        for (g = 0; g < c.length; g++) {\n          k < f[g].length && (d[n++] = f[g][k]);\n        }\n      }\n\n      for (k = 0; k < e; k++) {\n        for (g = 0; g < c.length; g++) {\n          k < i[g].length && (d[n++] = i[g][k]);\n        }\n      }\n\n      return d;\n    };\n\n    s = 4;\n\n    for (var j = {\n      PATTERN_POSITION_TABLE: [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]],\n      G15: 1335,\n      G18: 7973,\n      G15_MASK: 21522,\n      getBCHTypeInfo: function getBCHTypeInfo(a) {\n        for (var c = a << 10; 0 <= j.getBCHDigit(c) - j.getBCHDigit(j.G15);) {\n          c ^= j.G15 << j.getBCHDigit(c) - j.getBCHDigit(j.G15);\n        }\n\n        return (a << 10 | c) ^ j.G15_MASK;\n      },\n      getBCHTypeNumber: function getBCHTypeNumber(a) {\n        for (var c = a << 12; 0 <= j.getBCHDigit(c) - j.getBCHDigit(j.G18);) {\n          c ^= j.G18 << j.getBCHDigit(c) - j.getBCHDigit(j.G18);\n        }\n\n        return a << 12 | c;\n      },\n      getBCHDigit: function getBCHDigit(a) {\n        for (var c = 0; 0 != a;) {\n          c++, a >>>= 1;\n        }\n\n        return c;\n      },\n      getPatternPosition: function getPatternPosition(a) {\n        return j.PATTERN_POSITION_TABLE[a - 1];\n      },\n      getMask: function getMask(a, c, d) {\n        switch (a) {\n          case 0:\n            return 0 == (c + d) % 2;\n\n          case 1:\n            return 0 == c % 2;\n\n          case 2:\n            return 0 == d % 3;\n\n          case 3:\n            return 0 == (c + d) % 3;\n\n          case 4:\n            return 0 == (Math.floor(c / 2) + Math.floor(d / 3)) % 2;\n\n          case 5:\n            return 0 == c * d % 2 + c * d % 3;\n\n          case 6:\n            return 0 == (c * d % 2 + c * d % 3) % 2;\n\n          case 7:\n            return 0 == (c * d % 3 + (c + d) % 2) % 2;\n\n          default:\n            throw Error(\"bad maskPattern:\" + a);\n        }\n      },\n      getErrorCorrectPolynomial: function getErrorCorrectPolynomial(a) {\n        for (var c = new q([1], 0), d = 0; d < a; d++) {\n          c = c.multiply(new q([1, l.gexp(d)], 0));\n        }\n\n        return c;\n      },\n      getLengthInBits: function getLengthInBits(a, c) {\n        if (1 <= c && 10 > c) switch (a) {\n          case 1:\n            return 10;\n\n          case 2:\n            return 9;\n\n          case s:\n            return 8;\n\n          case 8:\n            return 8;\n\n          default:\n            throw Error(\"mode:\" + a);\n        } else if (27 > c) switch (a) {\n          case 1:\n            return 12;\n\n          case 2:\n            return 11;\n\n          case s:\n            return 16;\n\n          case 8:\n            return 10;\n\n          default:\n            throw Error(\"mode:\" + a);\n        } else if (41 > c) switch (a) {\n          case 1:\n            return 14;\n\n          case 2:\n            return 13;\n\n          case s:\n            return 16;\n\n          case 8:\n            return 12;\n\n          default:\n            throw Error(\"mode:\" + a);\n        } else throw Error(\"type:\" + c);\n      },\n      getLostPoint: function getLostPoint(a) {\n        for (var c = a.getModuleCount(), d = 0, b = 0; b < c; b++) {\n          for (var e = 0; e < c; e++) {\n            for (var f = 0, i = a.isDark(b, e), g = -1; 1 >= g; g++) {\n              if (!(0 > b + g || c <= b + g)) for (var h = -1; 1 >= h; h++) {\n                0 > e + h || c <= e + h || 0 == g && 0 == h || i == a.isDark(b + g, e + h) && f++;\n              }\n            }\n\n            5 < f && (d += 3 + f - 5);\n          }\n        }\n\n        for (b = 0; b < c - 1; b++) {\n          for (e = 0; e < c - 1; e++) {\n            if (f = 0, a.isDark(b, e) && f++, a.isDark(b + 1, e) && f++, a.isDark(b, e + 1) && f++, a.isDark(b + 1, e + 1) && f++, 0 == f || 4 == f) d += 3;\n          }\n        }\n\n        for (b = 0; b < c; b++) {\n          for (e = 0; e < c - 6; e++) {\n            a.isDark(b, e) && !a.isDark(b, e + 1) && a.isDark(b, e + 2) && a.isDark(b, e + 3) && a.isDark(b, e + 4) && !a.isDark(b, e + 5) && a.isDark(b, e + 6) && (d += 40);\n          }\n        }\n\n        for (e = 0; e < c; e++) {\n          for (b = 0; b < c - 6; b++) {\n            a.isDark(b, e) && !a.isDark(b + 1, e) && a.isDark(b + 2, e) && a.isDark(b + 3, e) && a.isDark(b + 4, e) && !a.isDark(b + 5, e) && a.isDark(b + 6, e) && (d += 40);\n          }\n        }\n\n        for (e = f = 0; e < c; e++) {\n          for (b = 0; b < c; b++) {\n            a.isDark(b, e) && f++;\n          }\n        }\n\n        a = Math.abs(100 * f / c / c - 50) / 5;\n        return d + 10 * a;\n      }\n    }, l = {\n      glog: function glog(a) {\n        if (1 > a) throw Error(\"glog(\" + a + \")\");\n        return l.LOG_TABLE[a];\n      },\n      gexp: function gexp(a) {\n        for (; 0 > a;) {\n          a += 255;\n        }\n\n        for (; 256 <= a;) {\n          a -= 255;\n        }\n\n        return l.EXP_TABLE[a];\n      },\n      EXP_TABLE: Array(256),\n      LOG_TABLE: Array(256)\n    }, m = 0; 8 > m; m++) {\n      l.EXP_TABLE[m] = 1 << m;\n    }\n\n    for (m = 8; 256 > m; m++) {\n      l.EXP_TABLE[m] = l.EXP_TABLE[m - 4] ^ l.EXP_TABLE[m - 5] ^ l.EXP_TABLE[m - 6] ^ l.EXP_TABLE[m - 8];\n    }\n\n    for (m = 0; 255 > m; m++) {\n      l.LOG_TABLE[l.EXP_TABLE[m]] = m;\n    }\n\n    q.prototype = {\n      get: function get(a) {\n        return this.num[a];\n      },\n      getLength: function getLength() {\n        return this.num.length;\n      },\n      multiply: function multiply(a) {\n        for (var c = Array(this.getLength() + a.getLength() - 1), d = 0; d < this.getLength(); d++) {\n          for (var b = 0; b < a.getLength(); b++) {\n            c[d + b] ^= l.gexp(l.glog(this.get(d)) + l.glog(a.get(b)));\n          }\n        }\n\n        return new q(c, 0);\n      },\n      mod: function mod(a) {\n        if (0 > this.getLength() - a.getLength()) return this;\n\n        for (var c = l.glog(this.get(0)) - l.glog(a.get(0)), d = Array(this.getLength()), b = 0; b < this.getLength(); b++) {\n          d[b] = this.get(b);\n        }\n\n        for (b = 0; b < a.getLength(); b++) {\n          d[b] ^= l.gexp(l.glog(a.get(b)) + c);\n        }\n\n        return new q(d, 0).mod(a);\n      }\n    };\n    p.RS_BLOCK_TABLE = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]];\n\n    p.getRSBlocks = function (a, c) {\n      var d = p.getRsBlockTable(a, c);\n      if (void 0 == d) throw Error(\"bad rs block @ typeNumber:\" + a + \"/errorCorrectLevel:\" + c);\n\n      for (var b = d.length / 3, e = [], f = 0; f < b; f++) {\n        for (var h = d[3 * f + 0], g = d[3 * f + 1], j = d[3 * f + 2], l = 0; l < h; l++) {\n          e.push(new p(g, j));\n        }\n      }\n\n      return e;\n    };\n\n    p.getRsBlockTable = function (a, c) {\n      switch (c) {\n        case 1:\n          return p.RS_BLOCK_TABLE[4 * (a - 1) + 0];\n\n        case 0:\n          return p.RS_BLOCK_TABLE[4 * (a - 1) + 1];\n\n        case 3:\n          return p.RS_BLOCK_TABLE[4 * (a - 1) + 2];\n\n        case 2:\n          return p.RS_BLOCK_TABLE[4 * (a - 1) + 3];\n      }\n    };\n\n    t.prototype = {\n      get: function get(a) {\n        return 1 == (this.buffer[Math.floor(a / 8)] >>> 7 - a % 8 & 1);\n      },\n      put: function put(a, c) {\n        for (var d = 0; d < c; d++) {\n          this.putBit(1 == (a >>> c - d - 1 & 1));\n        }\n      },\n      getLengthInBits: function getLengthInBits() {\n        return this.length;\n      },\n      putBit: function putBit(a) {\n        var c = Math.floor(this.length / 8);\n        this.buffer.length <= c && this.buffer.push(0);\n        a && (this.buffer[c] |= 128 >>> this.length % 8);\n        this.length++;\n      }\n    };\n    \"string\" === typeof h && (h = {\n      text: h\n    });\n    h = r.extend({}, {\n      render: \"canvas\",\n      width: 256,\n      height: 256,\n      typeNumber: -1,\n      correctLevel: 2,\n      background: \"#ffffff\",\n      foreground: \"#000000\"\n    }, h);\n    return this.each(function () {\n      var a;\n\n      if (\"canvas\" == h.render) {\n        a = new o(h.typeNumber, h.correctLevel);\n        a.addData(h.text);\n        a.make();\n        var c = document.createElement(\"canvas\");\n        c.width = h.width;\n        c.height = h.height;\n\n        for (var d = c.getContext(\"2d\"), b = h.width / a.getModuleCount(), e = h.height / a.getModuleCount(), f = 0; f < a.getModuleCount(); f++) {\n          for (var i = 0; i < a.getModuleCount(); i++) {\n            d.fillStyle = a.isDark(f, i) ? h.foreground : h.background;\n            var g = Math.ceil((i + 1) * b) - Math.floor(i * b),\n                j = Math.ceil((f + 1) * b) - Math.floor(f * b);\n            d.fillRect(Math.round(i * b), Math.round(f * e), g, j);\n          }\n        }\n      } else {\n        a = new o(h.typeNumber, h.correctLevel);\n        a.addData(h.text);\n        a.make();\n        c = r(\"<table></table>\").css(\"width\", h.width + \"px\").css(\"height\", h.height + \"px\").css(\"border\", \"0px\").css(\"border-collapse\", \"collapse\").css(\"background-color\", h.background);\n        d = h.width / a.getModuleCount();\n        b = h.height / a.getModuleCount();\n\n        for (e = 0; e < a.getModuleCount(); e++) {\n          f = r(\"<tr></tr>\").css(\"height\", b + \"px\").appendTo(c);\n\n          for (i = 0; i < a.getModuleCount(); i++) {\n            r(\"<td></td>\").css(\"width\", d + \"px\").css(\"background-color\", a.isDark(e, i) ? h.foreground : h.background).appendTo(f);\n          }\n        }\n      }\n\n      a = c;\n      jQuery(a).appendTo(this);\n    });\n  };\n})(jQuery);","map":null,"metadata":{},"sourceType":"script"}