{"ast":null,"code":"import _classCallCheck from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/zonestats/zonestats.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'tachyons';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport { Redirect, withRouter } from \"react-router\";\nimport Material_Card from '../../Card/Material_Card';\nimport './plantstats.css';\nimport ZoneDetails from '../../Card/ZoneDetailCard';\nimport { Button } from \"@material-ui/core\";\n\nvar ZoneStats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ZoneStats, _Component);\n\n  function ZoneStats(props) {\n    var _this;\n\n    _classCallCheck(this, ZoneStats);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ZoneStats).call(this, props));\n    _this.pr = {\n      cycle: \"\",\n      select: \"\",\n      startDate: \"\"\n    };\n    _this.state = {\n      zone: [],\n      cycle: 0,\n      current: 1,\n      row: 0,\n      inverter: '',\n      totalrows: [],\n      redirect: false,\n      plant: _this.props.plants.split('&')[0].toLowerCase(),\n      accap: [],\n      dccap: [],\n      totalzones: 0,\n      startDate: '',\n      details: [],\n      fmod: 0,\n      cleanstatus: 0,\n      updateDate: '',\n      updateTime: '',\n      comments: ''\n    };\n    _this.onNumberFixed = _this.onNumberFixed.bind(_assertThisInitialized(_this));\n    _this.onCycleFixed = _this.onCycleFixed.bind(_assertThisInitialized(_this));\n    _this.onRowFixed = _this.onRowFixed.bind(_assertThisInitialized(_this));\n    _this.handler2 = _this.handler2.bind(_assertThisInitialized(_this));\n    _this.setPlant = _this.setPlant.bind(_assertThisInitialized(_this));\n    _this.onCardClicked = _this.onCardClicked.bind(_assertThisInitialized(_this));\n    _this.setStateSynchronous = _this.setStateSynchronous.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ZoneStats, [{\n    key: \"setStateSynchronous\",\n    value: function setStateSynchronous(stateUpdate) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.setState(stateUpdate, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (!this.props.signedIn) {\n        this.setState({\n          redirect: true\n        });\n      }\n\n      fetch(\"http://localhost:3000/get-cycle-data\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this3.setState({\n          startDate: result.startDate,\n          cycle: result.currentCycle\n        });\n      });\n      fetch('http://localhost:3000/zonedata', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (hello) {\n        var zones = [];\n        var dccaps = [];\n        var acacps = [];\n        var tots = [];\n        hello.map(function (zo, i) {\n          zones.push(zo['zone']);\n          acacps.push(zo['accapacity']);\n          dccaps.push(zo['dccapacity']);\n          tots.push(zo['totalrows']);\n        });\n\n        _this3.setState({\n          zone: zones,\n          accap: acacps,\n          dccap: dccaps,\n          totalrows: tots,\n          totalzones: hello.length\n        });\n      });\n    }\n  }, {\n    key: \"handler2\",\n    value: function handler2(number) {\n      this.setState({\n        number: number\n      });\n    }\n  }, {\n    key: \"setPlant\",\n    value: function setPlant(plant) {\n      this.setState({\n        plant: plant\n      });\n    }\n  }, {\n    key: \"handler3\",\n    value: function handler3() {\n      var body = document.getElementById('least');\n      body.classList.toggle('fill');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.redirect) {\n        alert(\"SignIn to Access the Info\");\n        return React.createElement(Redirect, {\n          to: \"/signin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        });\n      }\n\n      var today = new Date();\n      var date = ('0' + today.getDate()).slice(-2) + '/' + ('0' + (today.getMonth() + 1)).slice(-2) + '/' + today.getFullYear();\n      var cards = [];\n\n      for (var i = 0; i < this.state.totalzones; i++) {\n        var random = Math.floor(Math.random() * 100);\n        cards.push(React.createElement(Material_Card, {\n          zone: this.state.zone[i],\n          rows: this.state.totalrows[i],\n          today: date,\n          accap: this.state.accap[i],\n          dccap: this.state.dccap[i],\n          progress: random,\n          onCardClicked: this.onCardClicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(FinalNav, {\n        fname: this.props.fname,\n        role: this.props.role,\n        plants: this.props.plants,\n        pr: this.pr,\n        handler1: this.handler2,\n        number: this.state.zone,\n        plantstats: false,\n        handle: this.handler3,\n        setplant: this.setPlant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"least\",\n        className: \"fill least\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, cards), React.createElement(\"div\", {\n        id: \"keast\",\n        className: \"fill surya least\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, this.state.details, React.createElement(Button, {\n        onClick: this.onButtonClicked,\n        variant: \"contained\",\n        className: \"outlined-button\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, \"Get Data For another Zone\")), React.createElement(\"div\", {\n        id: \"beast\",\n        className: \"fill surya least\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"onNumberFixed\",\n    value: function onNumberFixed(event) {\n      this.setState({\n        zone: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onCycleFixed\",\n    value: function onCycleFixed(event) {\n      this.setState({\n        current: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onRowFixed\",\n    value: function onRowFixed(event) {\n      this.setState({\n        row: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onButtonClicked\",\n    value: function onButtonClicked(e, block, inverter, smb) {\n      e.preventDefault();\n      fetch(\"http://localhost:3000/getblockdata\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant,\n          zone: this.props.zone,\n          block: block,\n          cycle: this.state.cycle,\n          startDate: this.state.startDate,\n          inverter: inverter,\n          smb: smb\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (delta) {\n        var del = [];\n        delta.map(function (delt, i) {\n          var b = {};\n        });\n      });\n      document.getElementById('least').style.display = 'grid';\n      document.getElementById('keast').style.display = 'none';\n    }\n  }, {\n    key: \"onCardClicked\",\n    value: function onCardClicked(_int) {\n      var _this4 = this;\n\n      var blocks = [];\n      var totalrows = [];\n      var totalmod = [];\n      var inverters = [];\n      var smb = [];\n      var fmod = [];\n      var tmod = [];\n      var wp = [];\n      fetch('http://localhost:3000/blockdata', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant,\n          zone: _int\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (hell) {\n        hell.map(function (hel, i) {\n          blocks.push(hel[\"blockname\"]);\n          totalrows.push(hel[\"totalrows\"]);\n          totalmod.push(hel[\"totalmodules\"]);\n          inverters.push(hel[\"inverter\"]);\n          smb.push(hel[\"smb\"]);\n          fmod.push(hel[\"_40mrows\"]);\n          tmod.push(hel[\"_20mrows\"]);\n          wp.push(hel[\"wp\"]);\n        });\n        var deta = [];\n\n        for (var i = 0; i < blocks.length; i++) {\n          deta.push(React.createElement(ZoneDetails, {\n            block: blocks[i],\n            totalrows: totalrows[i],\n            totalmod: totalmod[i],\n            inv: inverters[i],\n            smb: smb[i],\n            fmod: fmod[i],\n            tmod: tmod[i],\n            wp: wp[i],\n            zone: _int,\n            onButton: _this4.onButtonClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 257\n            },\n            __self: this\n          }));\n        }\n\n        _this4.setStateSynchronous({\n          details: deta\n        }).then(function (deter) {\n          console.log(_this4.state);\n          document.getElementById('least').style.display = 'none';\n          document.getElementById('keast').style.display = 'grid';\n        });\n      });\n    }\n  }]);\n\n  return ZoneStats;\n}(Component);\n\nexport default withRouter(ZoneStats);","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/zonestats/zonestats.js"],"names":["React","Component","FinalNav","Redirect","withRouter","Material_Card","ZoneDetails","Button","ZoneStats","props","pr","cycle","select","startDate","state","zone","current","row","inverter","totalrows","redirect","plant","plants","split","toLowerCase","accap","dccap","totalzones","details","fmod","cleanstatus","updateDate","updateTime","comments","onNumberFixed","bind","onCycleFixed","onRowFixed","handler2","setPlant","onCardClicked","setStateSynchronous","stateUpdate","Promise","resolve","setState","signedIn","fetch","method","headers","body","JSON","stringify","then","res","json","result","currentCycle","resp","hello","zones","dccaps","acacps","tots","map","zo","i","push","length","number","document","getElementById","classList","toggle","alert","today","Date","date","getDate","slice","getMonth","getFullYear","cards","random","Math","floor","fname","role","handler3","onButtonClicked","event","Number","target","value","e","block","smb","preventDefault","delta","del","delt","b","style","display","int","blocks","totalmod","inverters","tmod","wp","hell","hel","deta","deter","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'tachyons';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport {Redirect, withRouter} from \"react-router\";\nimport Material_Card from '../../Card/Material_Card';\nimport './plantstats.css';\nimport ZoneDetails from '../../Card/ZoneDetailCard';\nimport {Button} from \"@material-ui/core\";\n\nclass ZoneStats extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            zone: [],\n            cycle: 0,\n            current: 1,\n            row: 0,\n            inverter : '',\n            totalrows: [],\n            redirect: false,\n            plant: this.props.plants.split('&')[0].toLowerCase(),\n            accap: [],\n            dccap: [],\n            totalzones: 0,\n            startDate: '',\n            details: [],\n            fmod : 0,\n            cleanstatus : 0,\n            updateDate: '',\n            updateTime: '',\n            comments : '',\n        };\n\n        this.onNumberFixed = this.onNumberFixed.bind(this);\n        this.onCycleFixed = this.onCycleFixed.bind(this);\n        this.onRowFixed = this.onRowFixed.bind(this);\n        this.handler2 = this.handler2.bind(this);\n        this.setPlant = this.setPlant.bind(this);\n        this.onCardClicked = this.onCardClicked.bind(this);\n        this.setStateSynchronous = this.setStateSynchronous.bind(this);\n    }\n\n    setStateSynchronous(stateUpdate) {\n        return new Promise(resolve => {\n            this.setState(stateUpdate, () => resolve());\n        });\n    }\n\n    pr = {\n        cycle: \"\",\n        select: \"\",\n        startDate: \"\",\n    };\n\n    componentDidMount() {\n        if (!this.props.signedIn) {\n            this.setState({\n                redirect: true,\n            });\n        }\n\n        fetch(\"http://localhost:3000/get-cycle-data\", {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                plant: this.state.plant,\n            }),\n        })\n            .then(res => res.json())\n            .then(result => {\n                this.setState({\n                    startDate: result.startDate,\n                    cycle: result.currentCycle\n                });\n            });\n        fetch('http://localhost:3000/zonedata', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                plant: this.state.plant,\n            })\n        }).then(resp => resp.json())\n            .then(hello => {\n                    let zones = [];\n                    let dccaps = [];\n                    let acacps = [];\n                    let tots = [];\n                    hello.map((zo, i) => {\n                        zones.push(zo['zone']);\n                        acacps.push(zo['accapacity']);\n                        dccaps.push(zo['dccapacity']);\n                        tots.push(zo['totalrows']);\n                    });\n                    this.setState({\n                        zone: zones,\n                        accap: acacps,\n                        dccap: dccaps,\n                        totalrows: tots,\n                        totalzones: hello.length,\n                    });\n                }\n            );\n    }\n\n    handler2(number) {\n        this.setState({\n            number: number,\n        });\n    }\n\n    setPlant(plant) {\n        this.setState({\n            plant: plant,\n        });\n    }\n\n    handler3() {\n        let body = document.getElementById('least');\n        body.classList.toggle('fill');\n    }\n\n    render() {\n        if (this.state.redirect) {\n            alert(\"SignIn to Access the Info\");\n            return <Redirect to='/signin'/>\n        }\n\n        let today = new Date();\n        let date = ('0' + today.getDate()).slice(-2) + '/' + ('0' + (today.getMonth() + 1)).slice(-2) + '/' + today.getFullYear();\n        let cards = [];\n        for (let i = 0; i < this.state.totalzones; i++) {\n            let random = Math.floor(Math.random() * (100));\n            cards.push(<Material_Card zone={this.state.zone[i]}\n                                      rows={this.state.totalrows[i]}\n                                      today={date}\n                                      accap={this.state.accap[i]}\n                                      dccap={this.state.dccap[i]}\n                                      progress={random}\n                                      onCardClicked={this.onCardClicked}\n            />);\n        }\n\n        return (\n            <div>\n                <FinalNav fname={this.props.fname}\n                          role={this.props.role}\n                          plants={this.props.plants}\n                          pr={this.pr}\n                          handler1={this.handler2}\n                          number={this.state.zone}\n                          plantstats={false}\n                          handle={this.handler3}\n                          setplant={this.setPlant}\n                />\n                <div id='least' className='fill least'>\n                    {cards}\n                </div>\n                <div id='keast' className='fill surya least'>\n                    {this.state.details}\n                    <Button onClick={this.onButtonClicked} variant=\"contained\" className=\"outlined-button\" color=\"primary\">\n                        Get Data For another Zone\n                    </Button>\n                </div>\n                <div id='beast' className='fill surya least'>\n\n                </div>\n            </div>\n        );\n    }\n\n    onNumberFixed(event) {\n        this.setState({\n            zone: Number(event.target.value),\n        });\n    }\n\n    onCycleFixed(event) {\n        this.setState({\n            current: Number(event.target.value),\n        });\n    }\n\n    onRowFixed(event) {\n        this.setState({\n            row: Number(event.target.value),\n        });\n    }\n\n    onButtonClicked(e, block, inverter, smb){\n        e.preventDefault();\n        fetch(\"http://localhost:3000/getblockdata\",{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                plant : this.state.plant,\n                zone : this.props.zone,\n                block : block,\n                cycle : this.state.cycle,\n                startDate : this.state.startDate,\n                inverter : inverter,\n                smb : smb,\n            })\n        }).then(res=>res.json())\n            .then(delta => {\n                let del = [];\n                delta.map((delt, i)=>{\n                    let b = {\n\n                    }\n                })\n            });\n        document.getElementById('least').style.display = 'grid';\n        document.getElementById('keast').style.display = 'none';\n    }\n\n    onCardClicked(int) {\n        let blocks = [];\n        let totalrows = [];\n        let totalmod = [];\n        let inverters = [];\n        let smb = [];\n        let fmod = [];\n        let tmod = [];\n        let wp = [];\n        fetch('http://localhost:3000/blockdata', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                plant: this.state.plant,\n                zone: int,\n            })\n        }).then(res => res.json())\n            .then(hell => {\n                hell.map((hel, i) => {\n                    blocks.push(hel[\"blockname\"]);\n                    totalrows.push(hel[\"totalrows\"]);\n                    totalmod.push(hel[\"totalmodules\"]);\n                    inverters.push(hel[\"inverter\"]);\n                    smb.push(hel[\"smb\"]);\n                    fmod.push(hel[\"_40mrows\"]);\n                    tmod.push(hel[\"_20mrows\"]);\n                    wp.push(hel[\"wp\"]);\n                });\n                let deta = [];\n                for (let i = 0; i < blocks.length; i++) {\n                    deta.push(<ZoneDetails\n                        block={blocks[i]}\n                        totalrows={totalrows[i]}\n                        totalmod={totalmod[i]}\n                        inv={inverters[i]}\n                        smb={smb[i]}\n                        fmod={fmod[i]}\n                        tmod={tmod[i]}\n                        wp={wp[i]}\n                        zone={int}\n                        onButton={this.onButtonClicked}\n                    />)\n                }\n                this.setStateSynchronous({\n                    details: deta,\n                }).then(deter => {\n                    console.log(this.state);\n                    document.getElementById('least').style.display = 'none';\n                    document.getElementById('keast').style.display = 'grid';\n                });\n            })\n\n    }\n}\n\nexport default withRouter(ZoneStats);"]},"metadata":{},"sourceType":"module"}