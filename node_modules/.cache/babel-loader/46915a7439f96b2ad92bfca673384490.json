{"ast":null,"code":"import _classCallCheck from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/plantstats/plantstats.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './plantstats.css';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport { Redirect, withRouter } from \"react-router\";\nimport { LineChart, Line, Label, Brush, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nimport { Typography } from \"@material-ui/core\";\nimport LinearStatic from '../../Card/Progress/progress';\nimport SimpleCard from '../../Card/card.component';\n\nvar PlantStats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PlantStats, _Component);\n\n  function PlantStats(props) {\n    var _this;\n\n    _classCallCheck(this, PlantStats);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlantStats).call(this, props));\n    _this.pr = {\n      cycle: \"<div><span>Current Cycle - </span><strong>\".concat(_this.props.number, \"</strong></div>\"),\n      select: \"\",\n      startDate: \"<div><span>StartDate - </span><strong>\" + _this.props.startDate + \"</strong></div>\",\n      endDate: \"<div><span>ExpectedEndDate - </span><strong>\" + _this.props.endDate + \"</strong></div>\"\n    };\n    _this.state = {\n      number: 14,\n      duration: 0,\n      current: 0,\n      startDate: '16/10/2019',\n      endDate: '1/11/2019',\n      redirect: false,\n      ended: false,\n      plant: sessionStorage.getItem('plants').split('&')[0].toLowerCase(),\n      totalmodules: 0,\n      data: [{\n        \"name\": \"Page A\",\n        \"uv\": 4000,\n        \"pv\": 2400,\n        \"amt\": 2400\n      }, {\n        \"name\": \"Page B\",\n        \"uv\": 3000,\n        \"pv\": 1398,\n        \"amt\": 2210\n      }, {\n        \"name\": \"Page C\",\n        \"uv\": 2000,\n        \"pv\": 9800,\n        \"amt\": 2290\n      }, {\n        \"name\": \"Page D\",\n        \"uv\": 2780,\n        \"pv\": 3908,\n        \"amt\": 2000\n      }, {\n        \"name\": \"Page E\",\n        \"uv\": 1890,\n        \"pv\": 4800,\n        \"amt\": 2181\n      }, {\n        \"name\": \"Page F\",\n        \"uv\": 2390,\n        \"pv\": 3800,\n        \"amt\": 2500\n      }, {\n        \"name\": \"Page G\",\n        \"uv\": 3490,\n        \"pv\": 4300,\n        \"amt\": 2100\n      }],\n      data1: [],\n      totalcleaned: 0,\n      estimatedDuration: 15\n    };\n    _this.onCycleFixed = _this.onCycleFixed.bind(_assertThisInitialized(_this));\n    _this.setStateSynchronous = _this.setStateSynchronous.bind(_assertThisInitialized(_this));\n    _this.handler3 = _this.handler3.bind(_assertThisInitialized(_this));\n    _this.setPlant = _this.setPlant.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(PlantStats, [{\n    key: \"setStateSynchronous\",\n    value: function setStateSynchronous(stateUpdate) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.setState(stateUpdate, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (!sessionStorage.getItem('token')) {\n        this.setState({\n          redirect: true\n        });\n      }\n\n      if (this.props.role === 'admin') {\n        fetch(\"http://localhost:3000/check-cycle\", {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            plant: this.state.plant\n          })\n        }).then(function (resp) {\n          return resp.json();\n        }).then(function (hell) {\n          var endDate = new Date(hell.endDate);\n          var today = new Date();\n\n          if (hell['body'] === 1 || endDate <= today) {\n            _this3.setStateSynchronous({\n              ended: true\n            });\n          }\n        });\n      }\n\n      fetch('http://localhost:3000/get-cycle-data', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        var startDate = data.startDate,\n            endDate = data.endDate,\n            currentCycle = data.currentCycle,\n            duration = data.duration;\n\n        _this3.setStateSynchronous({\n          startDate: startDate,\n          endDate: endDate,\n          number: currentCycle,\n          duration: duration\n        }).then(function (bek) {\n          var date = new Date();\n          var date12;\n          var today = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n          date12 = _this3.state.endDate > today ? today : _this3.state.endDate;\n          fetch('http://localhost:3000/getplant', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              plant: _this3.state.plant,\n              startDate: _this3.state.startDate,\n              presentDate: date12,\n              cycle: _this3.state.number\n            })\n          }).then(function (hel) {\n            return hel.json();\n          }).then(function (lol) {\n            function compare(a, b) {\n              if (a.date > b.date) return 1;\n              if (b.date > a.date) return -1;\n              return 0;\n            }\n\n            lol['data'].sort(compare);\n\n            _this3.setStateSynchronous({\n              data: lol['data'],\n              totalmodules: lol['totalmodules']\n            }).then(function (jelly) {\n              var beo = [];\n\n              _this3.state.data.map(function (hello, i) {\n                return beo.push({\n                  'date': hello['date'],\n                  'today_cleaned': Math.floor(_this3.state.totalmodules / _this3.state.duration)\n                });\n              });\n\n              function compare(a, b) {\n                if (a.date > b.date) return 1;\n                if (b.date > a.date) return -1;\n                return 0;\n              }\n\n              beo.sort(compare);\n\n              _this3.setStateSynchronous({\n                data1: beo\n              });\n            });\n          }).then(function (help) {\n            var cleaned_till_date = 0;\n\n            for (var i = 0; i < _this3.state.data.length; i++) {\n              cleaned_till_date += _this3.state.data[i].today_cleaned;\n            }\n\n            _this3.setStateSynchronous({\n              totalcleaned: cleaned_till_date\n            });\n          });\n        });\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      var _this4 = this;\n\n      if (prevState.plant !== this.state.plant) {\n        if (this.props.role === 'admin') {\n          fetch(\"http://localhost:3000/check-cycle\", {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              plant: this.state.plant\n            })\n          }).then(function (resp) {\n            return resp.json();\n          }).then(function (hell) {\n            var endDate = new Date(hell.endDate);\n            var today = new Date();\n\n            if (hell['body'] === 1 || endDate <= today) {\n              var p = prompt('The Cycle has been completed,shall you want the cycle to start from today. Enter Y to start');\n\n              if (p === 'Y') {\n                var a = prompt('The Cycle will be completed within:(no of days)');\n                fetch(\"http://localhost:3000/create-cycle\", {\n                  method: 'post',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    plant: _this4.state.plant,\n                    startToday: hell['body'],\n                    estimatedDuration: a\n                  })\n                }).then(function (data) {\n                  return alert('Success');\n                });\n              }\n            }\n          }).catch(function (err) {\n            return console.log(err);\n          });\n        }\n\n        fetch('http://localhost:3000/get-cycle-data', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            plant: this.state.plant\n          })\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          var startDate = data.startDate,\n              endDate = data.endDate,\n              currentCycle = data.currentCycle,\n              duration = data.duration;\n\n          _this4.setStateSynchronous({\n            startDate: startDate,\n            endDate: endDate,\n            number: currentCycle,\n            duration: duration\n          }).then(function (bek) {\n            var date = new Date();\n            var date12;\n            var today = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n            date12 = _this4.state.endDate > today ? today : _this4.state.endDate;\n            fetch('http://localhost:3000/getplant', {\n              method: 'post',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                plant: _this4.state.plant,\n                startDate: _this4.state.startDate,\n                presentDate: date12,\n                cycle: _this4.state.number\n              })\n            }).then(function (hel) {\n              return hel.json();\n            }).then(function (lol) {\n              function compare(a, b) {\n                if (a.date > b.date) return 1;\n                if (b.date > a.date) return -1;\n                return 0;\n              }\n\n              lol['data'].sort(compare);\n\n              _this4.setStateSynchronous({\n                data: lol['data'],\n                totalmodules: lol['totalmodules']\n              }).then(function (jelly) {\n                var beo = [];\n\n                _this4.state.data.map(function (hello, i) {\n                  return beo.push({\n                    'date': hello['date'],\n                    'today_cleaned': Math.floor(_this4.state.totalmodules / _this4.state.duration)\n                  });\n                });\n\n                function compare(a, b) {\n                  if (a.date > b.date) return 1;\n                  if (b.date > a.date) return -1;\n                  return 0;\n                }\n\n                beo.sort(compare);\n\n                _this4.setStateSynchronous({\n                  data1: beo\n                });\n              });\n            }).then(function (help) {\n              var cleaned_till_date = 0;\n\n              for (var i = 0; i < _this4.state.data.length; i++) {\n                cleaned_till_date += _this4.state.data[i].today_cleaned;\n              }\n\n              _this4.setStateSynchronous({\n                totalcleaned: cleaned_till_date\n              }).then(function (lollo) {\n                return console.log(_this4.state);\n              });\n            });\n          });\n        }).catch(function (err) {\n          console.log(err);\n          alert(\"Can't find the data for the plant \".concat(_this4.state.plant));\n        });\n      }\n    }\n  }, {\n    key: \"handler3\",\n    value: function handler3() {\n      var body = document.getElementById('hello1');\n      body.classList.toggle('fill');\n    }\n  }, {\n    key: \"setPlant\",\n    value: function setPlant(plant) {\n      this.setStateSynchronous({\n        plant: plant\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var items = [];\n\n      for (var i = 1; i < this.state.number; i++) {\n        items.push(React.createElement(\"option\", {\n          key: i,\n          value: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340\n          },\n          __self: this\n        }, i));\n      }\n\n      items.push(React.createElement(\"option\", {\n        key: this.state.number,\n        selected: true,\n        value: this.state.number,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 342\n        },\n        __self: this\n      }, this.state.number));\n\n      if (this.state.redirect) {\n        alert(\"SignIn to Access the Info\");\n        return React.createElement(Redirect, {\n          to: \"/signin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 345\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, React.createElement(FinalNav, {\n        fname: sessionStorage.getItem('fname'),\n        role: sessionStorage.getItem('role'),\n        plants: sessionStorage.getItem('plants'),\n        pr: this.pr,\n        handler: this.props.handler,\n        number: this.state.number,\n        startDate: this.state.startDate,\n        endDate: this.state.endDate,\n        plantstats: true,\n        handle: this.handler3,\n        setplant: this.setPlant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"hello1\",\n        className: \"fill\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"cycleCard\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, this.state.ended ? React.createElement(SimpleCard, {\n        cycle: this.state.current,\n        plant: this.state.plant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }) : ''), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, \"Select cycle\")), React.createElement(\"select\", {\n        className: \"form-control\",\n        name: \"cycleNumber\",\n        onChange: this.onCycleFixed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, \" \", items)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }, \"Actual Cleaned vs Date\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 372\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        width: 730,\n        height: 250,\n        data: this.state.data,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 30\n        },\n        syncId: \"hell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373\n        },\n        __self: this\n      }, React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        dataKey: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, React.createElement(Label, {\n        value: \"Date\",\n        offset: -10,\n        position: \"insideBottom\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      })), React.createElement(YAxis, {\n        label: {\n          value: 'Total Modules Cleaned',\n          offset: 0,\n          angle: -90,\n          position: 'insideBottomLeft'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"linear\",\n        dataKey: \"today_cleaned\",\n        stroke: \"#003157\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 388\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }, \"Expected Cleaned vs Date\"), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 389\n        },\n        __self: this\n      }), React.createElement(LineChart, {\n        width: 730,\n        height: 250,\n        data: this.state.data1,\n        margin: {\n          top: 5,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        syncId: \"hell\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, React.createElement(CartesianGrid, {\n        strokeDasharray: \"3 3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }), React.createElement(XAxis, {\n        dataKey: \"date\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }), React.createElement(YAxis, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }), React.createElement(Tooltip, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }), React.createElement(Line, {\n        type: \"linear\",\n        dataKey: \"today_cleaned\",\n        stroke: \"#000000\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }), React.createElement(Brush, {\n        height: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, \"Total Modules Cleaned Till Date : \", this.state.totalcleaned, \" Out of \", this.state.totalmodules), React.createElement(LinearStatic, {\n        progress: Math.floor(this.state.totalcleaned / this.state.totalmodules * 100),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"onCycleFixed\",\n    value: function onCycleFixed(e) {\n      var _this5 = this;\n\n      e.preventDefault();\n      this.setStateSynchronous({\n        current: Number(e.target.value)\n      }).then(function (bro) {\n        var date = new Date();\n        var today = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n        var start, end;\n        fetch('http://localhost:3000/getdataofparticularcycle', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            plant: _this5.state.plant,\n            cycle: _this5.state.current\n          })\n        }).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          var date12 = '';\n          start = data.startDate;\n          end = data.endDate;\n          date12 = end > today ? today : end;\n          fetch('http://localhost:3000/getplant', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              plant: _this5.state.plant,\n              startDate: start,\n              presentDate: date12,\n              cycle: _this5.state.current\n            })\n          }).then(function (hel) {\n            return hel.json();\n          }).then(function (lol) {\n            function compare(a, b) {\n              if (a.date > b.date) return 1;\n              if (b.date > a.date) return -1;\n              return 0;\n            }\n\n            lol['data'].sort(compare);\n\n            _this5.setStateSynchronous({\n              data: lol['data'],\n              totalmodules: lol['totalmodules']\n            }).then(function (jelly) {\n              var beo = [];\n\n              _this5.state.data.map(function (hello, i) {\n                return beo.push({\n                  'date': hello['date'],\n                  'today_cleaned': Math.floor(_this5.state.totalmodules / _this5.state.duration)\n                });\n              });\n\n              function compare(a, b) {\n                if (a.date > b.date) return 1;\n                if (b.date > a.date) return -1;\n                return 0;\n              }\n\n              beo.sort(compare);\n\n              _this5.setStateSynchronous({\n                data1: beo\n              });\n            });\n          });\n        });\n      });\n    }\n  }]);\n\n  return PlantStats;\n}(Component);\n\nexport default withRouter(PlantStats);","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/plantstats/plantstats.js"],"names":["React","Component","FinalNav","Redirect","withRouter","LineChart","Line","Label","Brush","XAxis","YAxis","CartesianGrid","Tooltip","Typography","LinearStatic","SimpleCard","PlantStats","props","pr","cycle","number","select","startDate","endDate","state","duration","current","redirect","ended","plant","sessionStorage","getItem","split","toLowerCase","totalmodules","data","data1","totalcleaned","estimatedDuration","onCycleFixed","bind","setStateSynchronous","handler3","setPlant","stateUpdate","Promise","resolve","setState","role","fetch","method","headers","body","JSON","stringify","then","resp","json","hell","Date","today","res","currentCycle","bek","date","date12","getFullYear","getMonth","slice","getDate","presentDate","hel","lol","compare","a","b","sort","jelly","beo","map","hello","i","push","Math","floor","help","cleaned_till_date","length","today_cleaned","prevProps","prevState","snapshot","p","prompt","startToday","alert","catch","err","console","log","lollo","document","getElementById","classList","toggle","items","handler","top","right","left","bottom","value","offset","angle","position","e","preventDefault","Number","target","bro","start","end"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './plantstats.css'\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport {Redirect, withRouter} from \"react-router\";\nimport {LineChart, Line, Label , Brush, XAxis, YAxis, CartesianGrid, Tooltip} from 'recharts';\nimport {Typography} from \"@material-ui/core\";\nimport LinearStatic from '../../Card/Progress/progress';\n\nimport SimpleCard from '../../Card/card.component';\n\n\nclass PlantStats extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            number : 14,\n            duration : 0,\n            current: 0,\n            startDate: '16/10/2019',\n            endDate: '1/11/2019',\n            redirect : false,\n            ended : false,\n            plant : sessionStorage.getItem('plants').split('&')[0].toLowerCase(),\n            totalmodules : 0,\n            data : [\n                {\n                    \"name\": \"Page A\",\n                    \"uv\": 4000,\n                    \"pv\": 2400,\n                    \"amt\": 2400\n                },\n                {\n                    \"name\": \"Page B\",\n                    \"uv\": 3000,\n                    \"pv\": 1398,\n                    \"amt\": 2210\n                },\n                {\n                    \"name\": \"Page C\",\n                    \"uv\": 2000,\n                    \"pv\": 9800,\n                    \"amt\": 2290\n                },\n                {\n                    \"name\": \"Page D\",\n                    \"uv\": 2780,\n                    \"pv\": 3908,\n                    \"amt\": 2000\n                },\n                {\n                    \"name\": \"Page E\",\n                    \"uv\": 1890,\n                    \"pv\": 4800,\n                    \"amt\": 2181\n                },\n                {\n                    \"name\": \"Page F\",\n                    \"uv\": 2390,\n                    \"pv\": 3800,\n                    \"amt\": 2500\n                },\n                {\n                    \"name\": \"Page G\",\n                    \"uv\": 3490,\n                    \"pv\": 4300,\n                    \"amt\": 2100\n                }\n            ],\n            data1 : [],\n            totalcleaned : 0,\n            estimatedDuration : 15,\n        };\n        this.onCycleFixed = this.onCycleFixed.bind(this);\n        this.setStateSynchronous = this.setStateSynchronous.bind(this);\n        this.handler3 = this.handler3.bind(this);\n        this.setPlant = this.setPlant.bind(this);\n    }\n\n    setStateSynchronous(stateUpdate) {\n        return new Promise(resolve => {\n            this.setState(stateUpdate, () => resolve());\n        });\n    }\n\n    pr = {\n        cycle : `<div><span>Current Cycle - </span><strong>${this.props.number}</strong></div>`,\n        select : ``,\n        startDate : \"<div><span>StartDate - </span><strong>\"+this.props.startDate+\"</strong></div>\",\n        endDate : \"<div><span>ExpectedEndDate - </span><strong>\"+this.props.endDate+\"</strong></div>\",\n    };\n\n    componentDidMount() {\n        if (!sessionStorage.getItem('token')) {\n            this.setState({\n                redirect: true,\n            });\n        }\n        if(this.props.role === 'admin')\n        {\n            fetch(\"http://localhost:3000/check-cycle\",{\n                method : 'post',\n                headers : {\n                    'Content-Type' : 'application/json',\n                },\n                body : JSON.stringify({\n                    plant : this.state.plant,\n                })\n            })\n                .then(resp=> resp.json())\n                .then( hell =>\n                {\n                    let endDate = new Date(hell.endDate);\n                    let today = new Date();\n                    if(hell['body'] === 1 || endDate <= today ){\n                        this.setStateSynchronous({\n                            ended : true,\n                        });\n                    }\n                });\n        }\n        fetch('http://localhost:3000/get-cycle-data',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                plant : this.state.plant,\n            })\n        })\n            .then(res=>res.json())\n            .then(data=>{\n                let { startDate,endDate,currentCycle,duration } = data;\n                this.setStateSynchronous({\n                    startDate: startDate,\n                    endDate: endDate,\n                    number: currentCycle,\n                    duration : duration,\n                }).then(bek =>{\n                    const date = new Date();\n                    let date12;\n                    let today = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n                    date12 = this.state.endDate > today ? today : this.state.endDate;\n                    fetch('http://localhost:3000/getplant',{\n                        method : 'post',\n                        headers : {\n                            'Content-Type' : 'application/json',\n                        },\n                        body : JSON.stringify({\n                            plant : this.state.plant,\n                            startDate : this.state.startDate,\n                            presentDate : date12,\n                            cycle : this.state.number,\n                        })\n                    })\n                        .then(hel => hel.json())\n                        .then(lol=>{\n                            function compare(a, b){\n                                if (a.date > b.date) return 1;\n                                if (b.date > a.date) return -1;\n                                return 0;\n                            }\n                            lol['data'].sort(compare);\n                            this.setStateSynchronous({\n                                data : lol['data'],\n                                totalmodules : lol['totalmodules'],\n                            }).then(jelly =>{\n                                let beo = [];\n                                this.state.data.map((hello, i) => {\n                                    return beo.push({\n                                        'date' : hello['date'],\n                                        'today_cleaned' : Math.floor(this.state.totalmodules/this.state.duration),\n                                    });\n                                });\n                                function compare(a, b){\n                                    if (a.date > b.date) return 1;\n                                    if (b.date > a.date) return -1;\n                                    return 0;\n                                }\n                                beo.sort(compare);\n                                this.setStateSynchronous({\n                                    data1 : beo,\n                                });\n                            });\n                        }).then(help =>{\n                        let cleaned_till_date = 0;\n                        for(let i=0;i<this.state.data.length;i++)\n                        {\n                            cleaned_till_date += this.state.data[i].today_cleaned;\n                        }\n                        this.setStateSynchronous({\n                            totalcleaned : cleaned_till_date,\n                        });\n                        });\n                });\n            });\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if(prevState.plant !== this.state.plant)\n        {\n            if(this.props.role === 'admin')\n            {\n                fetch(\"http://localhost:3000/check-cycle\",{\n                    method : 'post',\n                    headers : {\n                        'Content-Type' : 'application/json',\n                    },\n                    body : JSON.stringify({\n                        plant : this.state.plant,\n                    })\n                })\n                    .then(resp=> resp.json())\n                    .then( hell =>\n                    {\n                        let endDate = new Date(hell.endDate);\n                        let today = new Date();\n                        if(hell['body'] === 1 || endDate <= today){\n                            const p = prompt('The Cycle has been completed,shall you want the cycle to start from today. Enter Y to start');\n                            if(p === 'Y')\n                            {\n                                const a = prompt('The Cycle will be completed within:(no of days)');\n                                fetch(\"http://localhost:3000/create-cycle\",\n                                    {\n                                        method : 'post',\n                                        headers : {\n                                            'Content-Type' : 'application/json',\n                                        },\n                                        body : JSON.stringify({\n                                            plant : this.state.plant,\n                                            startToday : hell['body'],\n                                            estimatedDuration : a,\n                                        })\n                                    }\n                                ).then(data => alert('Success'))\n                            }\n                        }\n                    })\n                    .catch(err=>console.log(err));\n            }\n            fetch('http://localhost:3000/get-cycle-data',{\n                method : 'post',\n                headers : {\n                    'Content-Type' : 'application/json',\n                },\n                body : JSON.stringify({\n                    plant : this.state.plant,\n                })\n            })\n                .then(res=>res.json())\n                .then(data=>{\n                    let { startDate,endDate,currentCycle,duration } = data;\n                    this.setStateSynchronous({\n                        startDate: startDate,\n                        endDate: endDate,\n                        number: currentCycle,\n                        duration : duration,\n                    })\n                        .then(bek =>{\n                        const date = new Date();\n                        let date12;\n                        let today = date.getFullYear() + '-' + ('0' + (date.getMonth() + 1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n                        date12 = this.state.endDate > today ? today : this.state.endDate;\n                        fetch('http://localhost:3000/getplant',{\n                            method : 'post',\n                            headers : {\n                                'Content-Type' : 'application/json',\n                            },\n                            body : JSON.stringify({\n                                plant : this.state.plant,\n                                startDate : this.state.startDate,\n                                presentDate : date12,\n                                cycle : this.state.number,\n                            })\n                        })\n                            .then(hel => hel.json())\n                            .then(lol=>{\n                                function compare(a, b){\n                                    if (a.date > b.date) return 1;\n                                    if (b.date > a.date) return -1;\n                                    return 0;\n                                }\n                                lol['data'].sort(compare);\n                                this.setStateSynchronous({\n                                    data : lol['data'],\n                                    totalmodules : lol['totalmodules'],\n                                }).then(jelly =>{\n                                    let beo = [];\n                                    this.state.data.map((hello, i) => {\n                                        return beo.push({\n                                            'date' : hello['date'],\n                                            'today_cleaned' : Math.floor(this.state.totalmodules/this.state.duration),\n                                        });\n                                    });\n                                    function compare(a, b){\n                                        if (a.date > b.date) return 1;\n                                        if (b.date > a.date) return -1;\n                                        return 0;\n                                    }\n                                    beo.sort(compare);\n                                    this.setStateSynchronous({\n                                        data1 : beo,\n                                    });\n                                });\n                            }).then(help =>{\n                            let cleaned_till_date = 0;\n                            for(let i=0;i<this.state.data.length;i++)\n                            {\n                                cleaned_till_date += this.state.data[i].today_cleaned;\n                            }\n                            this.setStateSynchronous({\n                                totalcleaned : cleaned_till_date,\n                            }).then(lollo => console.log(this.state));\n                        });\n                    });\n                })\n                .catch(err => {\n                    console.log(err);\n                    alert(`Can't find the data for the plant ${this.state.plant}`);\n                });\n        }\n    }\n\n    handler3(){\n        let body = document.getElementById('hello1');\n        body.classList.toggle('fill');\n    }\n\n    setPlant(plant){\n        this.setStateSynchronous({\n            plant : plant,\n        });\n    }\n\n    render() {\n        let items = [];\n        for (let i = 1; i < this.state.number; i++) {\n            items.push(<option key={i} value={i}>{i}</option>);\n        }\n        items.push(<option key={this.state.number} selected={true} value={this.state.number}>{this.state.number}</option>);\n        if (this.state.redirect) {\n            alert(\"SignIn to Access the Info\");\n            return <Redirect to='/signin'/>;\n        }\n\n        return (\n            <div>\n                <FinalNav fname={sessionStorage.getItem('fname')}\n                          role={sessionStorage.getItem('role')}\n                          plants={sessionStorage.getItem('plants')}\n                          pr={this.pr}\n                          handler={this.props.handler}\n                          number={this.state.number}\n                          startDate={this.state.startDate}\n                          endDate={this.state.endDate}\n                          plantstats={true}\n                          handle={this.handler3}\n                          setplant={this.setPlant}\n                />\n                <div id=\"hello1\" className='fill'>\n                    <div id='cycleCard'>\n                    {\n                        this.state.ended ? <SimpleCard cycle={this.state.current} plant={this.state.plant} /> : ''\n                    }\n                    </div>\n                    <div><span><strong>Select cycle</strong></span><select className=\"form-control\" name='cycleNumber'\n                                                                           onChange={this.onCycleFixed}> {items}</select>\n                    </div>\n                    <br/>\n                    <h5>Actual Cleaned vs Date</h5> <br/>\n                    <LineChart width={730} height={250} data={this.state.data}\n                               margin={{top: 5, right: 30, left: 20, bottom: 30}} syncId='hell'>\n                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                        <XAxis dataKey=\"date\">\n                            <Label value=\"Date\" offset={-10} position=\"insideBottom\"/>\n                        </XAxis>\n                        <YAxis label={{\n                            value: 'Total Modules Cleaned',\n                            offset: 0,\n                            angle: -90,\n                            position: 'insideBottomLeft'\n                        }}/>\n                        <Tooltip/>\n                        <Line type=\"linear\" dataKey=\"today_cleaned\" stroke=\"#003157\"/>\n                    </LineChart>\n                    <br/>\n                    <h5>Expected Cleaned vs Date</h5> <br/>\n                    <LineChart width={730} height={250} data={this.state.data1}\n                               margin={{top: 5, right: 30, left: 20, bottom: 5}} syncId='hell'>\n                        <CartesianGrid strokeDasharray=\"3 3\"/>\n                        <XAxis dataKey=\"date\"/>\n                        <YAxis/>\n                        <Tooltip/>\n                        <Line type=\"linear\" dataKey=\"today_cleaned\" stroke=\"#000000\"/>\n                        <Brush height={20}/>\n                    </LineChart>\n                    <br/>\n                    <Typography variant='body2'>Total Modules Cleaned Till Date : {this.state.totalcleaned} Out\n                        of {this.state.totalmodules}</Typography>\n                    <LinearStatic\n                        progress={Math.floor((this.state.totalcleaned / this.state.totalmodules) * 100)}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    onCycleFixed(e) {\n        e.preventDefault();\n        this.setStateSynchronous(({current: Number(e.target.value)})).then( bro => {\n            let date = new Date();\n            let today = date.getFullYear() + '-' + ('0' + (date.getMonth()+1)).slice(-2) + '-' + ('0' + date.getDate()).slice(-2);\n                    let start, end;\n                    fetch('http://localhost:3000/getdataofparticularcycle',{\n                        method : 'post',\n                        headers : {\n                            'Content-Type' : 'application/json',\n                        },\n                        body : JSON.stringify({\n                            plant : this.state.plant,\n                            cycle : this.state.current,\n                        })\n                    }).then(res=> res.json())\n                        .then(data => {\n                            let date12 ='';\n                            start = data.startDate;\n                            end = data.endDate;\n                            date12 = end > today ? today : end;\n                            fetch('http://localhost:3000/getplant',{\n                                method : 'post',\n                                headers : {\n                                    'Content-Type' : 'application/json',\n                                },\n                                body : JSON.stringify({\n                                    plant : this.state.plant,\n                                    startDate : start,\n                                    presentDate : date12,\n                                    cycle : this.state.current,\n                                })\n                            })\n                                .then(hel => hel.json())\n                                .then(lol=>{\n                                    function compare(a, b){\n                                        if (a.date > b.date) return 1;\n                                        if (b.date > a.date) return -1;\n                                        return 0;\n                                    }\n                                    lol['data'].sort(compare);\n                                    this.setStateSynchronous({\n                                        data : lol['data'],\n                                        totalmodules : lol['totalmodules'],\n                                    }).then(jelly =>{\n                                        let beo = [];\n                                        this.state.data.map((hello, i) => {\n                                            return beo.push({\n                                                'date' : hello['date'],\n                                                'today_cleaned' : Math.floor(this.state.totalmodules/this.state.duration),\n                                            });\n                                        });\n                                        function compare(a, b){\n                                            if (a.date > b.date) return 1;\n                                            if (b.date > a.date) return -1;\n                                            return 0;\n                                        }\n                                        beo.sort(compare);\n                                        this.setStateSynchronous({\n                                            data1 : beo,\n                                        });\n                                    });\n                                });\n                        });\n                });\n        }\n}\n\nexport default withRouter(PlantStats);\n\n\n"]},"metadata":{},"sourceType":"module"}