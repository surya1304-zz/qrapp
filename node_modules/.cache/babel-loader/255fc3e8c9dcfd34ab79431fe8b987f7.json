{"ast":null,"code":"var _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Card/Row_details.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card, CardContent } from '@material-ui/core';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nvar useStyles = makeStyles({\n  card: {\n    minWidth: 400,\n    maxWidth: '40vw',\n    minHeight: 200,\n    textAlign: 'end',\n    position: 'relative'\n  },\n  title: {\n    fontSize: 14\n  },\n  orangeAvatar: {\n    margin: 10,\n    color: '#fff',\n    backgroundColor: 'black'\n  },\n  top: {\n    position: 'absolute',\n    top: 50,\n    right: 5\n  }\n});\nexport default function BlockStats(_ref) {\n  var row = _ref.row,\n      fmod = _ref.fmod,\n      cleanStatus = _ref.cleanStatus,\n      updateDate = _ref.updateDate,\n      updateTime = _ref.updateTime,\n      comments = _ref.comments;\n  var classes = useStyles();\n  return React.createElement(Card, {\n    className: classes.card,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    avatar: React.createElement(Avatar, {\n      className: classes.orangeAvatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, row),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    className: classes.top,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, fmod == 1 ? React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Row-Type : 40 Module Row\") : React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Row-Type : 20 Module Row\"), cleanStatus == 1 ? React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Clean Status : Cleaned\") : React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Clean Status : Not Cleaned\"), cleanStatus == 1 ? React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \" Update Date : \", updateDate, \" \") : React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Will be cleaned Soon\"), cleanStatus == 1 ? React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \" Update Time : \", updateTime, \" \") : '', cleanStatus == 1 ? React.createElement(Typography, {\n    variant: \"body2\",\n    component: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, \" Comment : \", comments, \" \") : ''));\n}","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Card/Row_details.js"],"names":["React","makeStyles","Card","CardContent","CardHeader","Typography","Avatar","useStyles","card","minWidth","maxWidth","minHeight","textAlign","position","title","fontSize","orangeAvatar","margin","color","backgroundColor","top","right","BlockStats","row","fmod","cleanStatus","updateDate","updateTime","comments","classes"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Card,CardContent } from '@material-ui/core';\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\n\nconst useStyles = makeStyles({\n    card: {\n        minWidth: 400,\n        maxWidth : '40vw',\n        minHeight : 200,\n        textAlign : 'end',\n        position: 'relative'\n    },\n    title: {\n        fontSize: 14,\n    },\n    orangeAvatar: {\n        margin: 10,\n        color: '#fff',\n        backgroundColor: 'black',\n    },\n    top : {\n        position : 'absolute',\n        top : 50,\n        right : 5,\n    }\n});\n\nexport default function BlockStats({ row, fmod, cleanStatus, updateDate, updateTime, comments }) {\n    const classes = useStyles();\n\n    return (\n        <Card className={classes.card}>\n            <CardHeader\n                avatar={<Avatar className={classes.orangeAvatar}>{row}</Avatar>}\n            />\n            <CardContent className={classes.top}>\n                {\n                    fmod == 1 ? <Typography variant=\"h5\" component=\"h2\">Row-Type : 40 Module Row</Typography> : <Typography variant=\"h5\" component=\"h2\">Row-Type : 20 Module Row</Typography>\n                }\n                {\n                    cleanStatus == 1 ? <Typography variant=\"h5\" component=\"h2\">Clean Status : Cleaned</Typography> : <Typography variant=\"h5\" component=\"h2\">Clean Status : Not Cleaned</Typography>\n                }\n                {\n                    cleanStatus == 1 ? <Typography variant=\"body2\" component=\"h2\"> Update Date : {updateDate} </Typography> : <Typography variant=\"body2\" component=\"h2\">Will be cleaned Soon</Typography>\n                }\n                {\n                    cleanStatus == 1 ? <Typography variant=\"body2\" component=\"h2\"> Update Time : {updateTime} </Typography> : ''\n                }\n                {\n                    cleanStatus == 1 ? <Typography variant=\"body2\" component=\"h2\"> Comment : {comments} </Typography> : ''\n                }\n            </CardContent>\n        </Card>\n    );\n}\n\n\n"]},"metadata":{},"sourceType":"module"}