{"ast":null,"code":"import _classCallCheck from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/zonestats/zonestats.js\";\nimport React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'tachyons';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport { Redirect, withRouter } from \"react-router\";\nimport Material_Card from '../../Card/Material_Card';\nimport './plantstats.css';\nimport ZoneDetails from '../../Card/ZoneDetailCard';\nimport { Button } from \"@material-ui/core\";\nimport BlockStats from \"../../Card/Row_details\";\n\nvar ZoneStats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ZoneStats, _Component);\n\n  function ZoneStats(props) {\n    var _this;\n\n    _classCallCheck(this, ZoneStats);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ZoneStats).call(this, props));\n    _this.pr = {\n      cycle: \"\",\n      select: \"\",\n      startDate: \"\"\n    };\n    _this.state = {\n      zone: [],\n      zoneIndividual: 0,\n      cycle: 0,\n      current: 1,\n      row: 0,\n      inverter: '',\n      totalrows: [],\n      redirect: false,\n      plant: _this.props.plants.split('&')[0].toLowerCase(),\n      accap: [],\n      dccap: [],\n      totalzones: 0,\n      startDate: '',\n      details: [],\n      data: [],\n      progress: []\n    };\n    _this.onNumberFixed = _this.onNumberFixed.bind(_assertThisInitialized(_this));\n    _this.onCycleFixed = _this.onCycleFixed.bind(_assertThisInitialized(_this));\n    _this.onRowFixed = _this.onRowFixed.bind(_assertThisInitialized(_this));\n    _this.handler2 = _this.handler2.bind(_assertThisInitialized(_this));\n    _this.setPlant = _this.setPlant.bind(_assertThisInitialized(_this));\n    _this.onCardClicked = _this.onCardClicked.bind(_assertThisInitialized(_this));\n    _this.setStateSynchronous = _this.setStateSynchronous.bind(_assertThisInitialized(_this));\n    _this.onButtonClicked = _this.onButtonClicked.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(ZoneStats, [{\n    key: \"setStateSynchronous\",\n    value: function setStateSynchronous(stateUpdate) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.setState(stateUpdate, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      if (!this.props.signedIn) {\n        this.setState({\n          redirect: true\n        });\n      }\n\n      fetch(\"http://localhost:3000/get-cycle-data\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        _this3.setStateSynchronous({\n          startDate: result.startDate,\n          cycle: result.currentCycle\n        }).then(function (hela) {\n          return fetch('http://localhost:3000/zoneprogress', {\n            method: 'post',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              plant: _this3.state.plant,\n              date: _this3.state.startDate,\n              cycle: _this3.state.cycle\n            })\n          }).then(function (res) {\n            return res.json();\n          }).then(function (thor) {});\n        });\n      });\n      fetch('http://localhost:3000/zonedata', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (hello) {\n        var zones = [];\n        var dccaps = [];\n        var acacps = [];\n        var tots = [];\n        hello.map(function (zo, i) {\n          zones.push(zo['zone']);\n          acacps.push(zo['accapacity']);\n          dccaps.push(zo['dccapacity']);\n          tots.push(zo['totalrows']);\n        });\n\n        _this3.setState({\n          zone: zones,\n          accap: acacps,\n          dccap: dccaps,\n          totalrows: tots,\n          totalzones: hello.length\n        });\n      });\n    }\n  }, {\n    key: \"handler2\",\n    value: function handler2(number) {\n      this.setState({\n        number: number\n      });\n    }\n  }, {\n    key: \"setPlant\",\n    value: function setPlant(plant) {\n      this.setState({\n        plant: plant\n      });\n    }\n  }, {\n    key: \"handler3\",\n    value: function handler3() {\n      var body = document.getElementById('least');\n      body.classList.toggle('fill');\n      var body1 = document.getElementById('keast');\n      body1.classList.toggle('fill');\n      var body2 = document.getElementById('beast');\n      body2.classList.toggle('fill');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.redirect) {\n        alert(\"SignIn to Access the Info\");\n        return React.createElement(Redirect, {\n          to: \"/signin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        });\n      }\n\n      var today = new Date();\n      var date = ('0' + today.getDate()).slice(-2) + '/' + ('0' + (today.getMonth() + 1)).slice(-2) + '/' + today.getFullYear();\n      var cards = [];\n\n      for (var i = 0; i < this.state.totalzones; i++) {\n        cards.push(React.createElement(Material_Card, {\n          zone: this.state.zone[i],\n          rows: this.state.totalrows[i],\n          today: date,\n          accap: this.state.accap[i],\n          dccap: this.state.dccap[i],\n          progress: this.state.progress[i],\n          onCardClicked: this.onCardClicked,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(FinalNav, {\n        fname: this.props.fname,\n        role: this.props.role,\n        plants: this.props.plants,\n        pr: this.pr,\n        handler1: this.handler2,\n        number: this.state.zone,\n        plantstats: false,\n        handle: this.handler3,\n        setplant: this.setPlant,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"least\",\n        className: \"fill least\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, cards), React.createElement(\"div\", {\n        id: \"keast\",\n        className: \"fill surya least\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, this.state.details, React.createElement(Button, {\n        onClick: this.onButtonClicked1,\n        variant: \"contained\",\n        className: \"outlined-button\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"Get Data For another Zone\")), React.createElement(\"div\", {\n        id: \"beast\",\n        className: \"fill surya least\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.state.data, React.createElement(Button, {\n        onClick: this.onButtonClicked2,\n        variant: \"contained\",\n        className: \"outlined-button\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Get Data For another Block\")));\n    }\n  }, {\n    key: \"onNumberFixed\",\n    value: function onNumberFixed(event) {\n      this.setState({\n        zone: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onCycleFixed\",\n    value: function onCycleFixed(event) {\n      this.setState({\n        current: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onRowFixed\",\n    value: function onRowFixed(event) {\n      this.setState({\n        row: Number(event.target.value)\n      });\n    }\n  }, {\n    key: \"onButtonClicked1\",\n    value: function onButtonClicked1(e) {\n      e.preventDefault();\n      document.getElementById('least').style.display = 'grid';\n      document.getElementById('keast').style.display = 'none';\n      document.getElementById('beast').style.display = 'none';\n    }\n  }, {\n    key: \"onButtonClicked2\",\n    value: function onButtonClicked2(e) {\n      e.preventDefault();\n      document.getElementById('least').style.display = 'none';\n      document.getElementById('keast').style.display = 'grid';\n      document.getElementById('beast').style.display = 'none';\n    }\n  }, {\n    key: \"onButtonClicked\",\n    value: function onButtonClicked(e, block, inverter, smb) {\n      var _this4 = this;\n\n      e.preventDefault();\n      fetch(\"http://localhost:3000/getblockdata\", {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          plant: this.state.plant,\n          zone: this.state.zoneIndividual,\n          block: block,\n          cycle: this.state.cycle,\n          startDate: this.state.startDate,\n          inverter: inverter,\n          smb: smb\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (delta) {\n        console.log(delta);\n        var del = [];\n        delta.map(function (delt, i) {\n          var b = React.createElement(BlockStats, {\n            row: i + 1,\n            fmod: delt[\"fmod\"],\n            cleanStatus: delt[\"cleanstatus\"],\n            updateDate: delt[\"updateDate\"],\n            updateTime: delt[\"updateTime\"],\n            comments: delt[\"comments\"],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252\n            },\n            __self: this\n          });\n          del.push(b);\n        });\n\n        _this4.setStateSynchronous({\n          data: del\n        });\n      });\n      document.getElementById('least').style.display = 'none';\n      document.getElementById('keast').style.display = 'none';\n      document.getElementById('beast').style.display = 'grid';\n    }\n  }, {\n    key: \"onCardClicked\",\n    value: function onCardClicked(_int) {\n      var _this5 = this;\n\n      console.log(_int);\n      var blocks = [];\n      var totalrows = [];\n      var totalmod = [];\n      var inverters = [];\n      var smb = [];\n      var fmod = [];\n      var tmod = [];\n      var wp = [];\n      this.setState({\n        zoneIndividual: _int\n      });\n      fetch('http://localhost:3000/blockdata', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"plant\": this.state.plant,\n          \"zone\": _int\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (hell) {\n        hell.map(function (hel, i) {\n          blocks.push(hel[\"blockname\"]);\n          totalrows.push(hel[\"totalrows\"]);\n          totalmod.push(hel[\"totalmodules\"]);\n          inverters.push(hel[\"inverter\"]);\n          smb.push(hel[\"smb\"]);\n          fmod.push(hel[\"_40mrows\"]);\n          tmod.push(hel[\"_20mrows\"]);\n          wp.push(hel[\"wp\"]);\n        });\n        var deta = [];\n\n        for (var i = 0; i < blocks.length; i++) {\n          deta.push(React.createElement(ZoneDetails, {\n            block: blocks[i],\n            totalrows: totalrows[i],\n            totalmod: totalmod[i],\n            inv: inverters[i],\n            smb: smb[i],\n            fmod: fmod[i],\n            tmod: tmod[i],\n            wp: wp[i],\n            zone: _int,\n            onButton: _this5.onButtonClicked,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308\n            },\n            __self: this\n          }));\n        }\n\n        _this5.setStateSynchronous({\n          details: deta\n        }).then(function (deter) {\n          document.getElementById('least').style.display = 'none';\n          document.getElementById('beast').style.display = 'none';\n          document.getElementById('keast').style.display = 'grid';\n        });\n      });\n    }\n  }]);\n\n  return ZoneStats;\n}(Component);\n\nexport default withRouter(ZoneStats);","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Stats/zonestats/zonestats.js"],"names":["React","Component","FinalNav","Redirect","withRouter","Material_Card","ZoneDetails","Button","BlockStats","ZoneStats","props","pr","cycle","select","startDate","state","zone","zoneIndividual","current","row","inverter","totalrows","redirect","plant","plants","split","toLowerCase","accap","dccap","totalzones","details","data","progress","onNumberFixed","bind","onCycleFixed","onRowFixed","handler2","setPlant","onCardClicked","setStateSynchronous","onButtonClicked","stateUpdate","Promise","resolve","setState","signedIn","fetch","method","headers","body","JSON","stringify","then","res","json","result","currentCycle","hela","date","thor","resp","hello","zones","dccaps","acacps","tots","map","zo","i","push","length","number","document","getElementById","classList","toggle","body1","body2","alert","today","Date","getDate","slice","getMonth","getFullYear","cards","fname","role","handler3","onButtonClicked1","onButtonClicked2","event","Number","target","value","e","preventDefault","style","display","block","smb","delta","console","log","del","delt","b","int","blocks","totalmod","inverters","fmod","tmod","wp","hell","hel","deta","deter"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'tachyons';\nimport FinalNav from \"../../Navigation/FinalNav\";\nimport {Redirect, withRouter} from \"react-router\";\nimport Material_Card from '../../Card/Material_Card';\nimport './plantstats.css';\nimport ZoneDetails from '../../Card/ZoneDetailCard';\nimport {Button} from \"@material-ui/core\";\nimport BlockStats from \"../../Card/Row_details\";\n\nclass ZoneStats extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            zone: [],\n            zoneIndividual : 0,\n            cycle: 0,\n            current: 1,\n            row: 0,\n            inverter : '',\n            totalrows: [],\n            redirect: false,\n            plant: this.props.plants.split('&')[0].toLowerCase(),\n            accap: [],\n            dccap: [],\n            totalzones: 0,\n            startDate: '',\n            details: [],\n            data : [],\n            progress : [],\n        };\n\n        this.onNumberFixed = this.onNumberFixed.bind(this);\n        this.onCycleFixed = this.onCycleFixed.bind(this);\n        this.onRowFixed = this.onRowFixed.bind(this);\n        this.handler2 = this.handler2.bind(this);\n        this.setPlant = this.setPlant.bind(this);\n        this.onCardClicked = this.onCardClicked.bind(this);\n        this.setStateSynchronous = this.setStateSynchronous.bind(this);\n        this.onButtonClicked = this.onButtonClicked.bind(this);\n    }\n\n    setStateSynchronous(stateUpdate) {\n        return new Promise(resolve => {\n            this.setState(stateUpdate, () => resolve());\n        });\n    }\n\n    pr = {\n        cycle: \"\",\n        select: \"\",\n        startDate: \"\",\n    };\n\n    componentDidMount() {\n        if (!this.props.signedIn) {\n            this.setState({\n                redirect: true,\n            });\n        }\n\n        fetch(\"http://localhost:3000/get-cycle-data\", {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                plant: this.state.plant,\n            }),\n        })\n            .then(res => res.json())\n            .then(result => {\n                this.setStateSynchronous({\n                    startDate: result.startDate,\n                    cycle: result.currentCycle\n                }).then(hela=>fetch('http://localhost:3000/zoneprogress',{\n                    method : 'post',\n                    headers : {\n                        'Content-Type' : 'application/json',\n                    },\n                    body : JSON.stringify({\n                        plant : this.state.plant,\n                        date : this.state.startDate,\n                        cycle : this.state.cycle,\n                    })\n                }).then(res => res.json())\n                    .then(thor => {\n\n                    })\n                )\n            });\n        fetch('http://localhost:3000/zonedata', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                plant: this.state.plant,\n            })\n        }).then(resp => resp.json())\n            .then(hello => {\n                    let zones = [];\n                    let dccaps = [];\n                    let acacps = [];\n                    let tots = [];\n                    hello.map((zo, i) => {\n                        zones.push(zo['zone']);\n                        acacps.push(zo['accapacity']);\n                        dccaps.push(zo['dccapacity']);\n                        tots.push(zo['totalrows']);\n                    });\n                    this.setState({\n                        zone: zones,\n                        accap: acacps,\n                        dccap: dccaps,\n                        totalrows: tots,\n                        totalzones: hello.length,\n                    });\n                }\n            );\n    }\n\n    handler2(number) {\n        this.setState({\n            number: number,\n        });\n    }\n\n    setPlant(plant) {\n        this.setState({\n            plant: plant,\n        });\n    }\n\n    handler3() {\n        let body = document.getElementById('least');\n        body.classList.toggle('fill');\n        let body1 = document.getElementById('keast');\n        body1.classList.toggle('fill');\n        let body2 = document.getElementById('beast');\n        body2.classList.toggle('fill');\n    }\n\n    render() {\n        if (this.state.redirect) {\n            alert(\"SignIn to Access the Info\");\n            return <Redirect to='/signin'/>\n        }\n\n        let today = new Date();\n        let date = ('0' + today.getDate()).slice(-2) + '/' + ('0' + (today.getMonth() + 1)).slice(-2) + '/' + today.getFullYear();\n        let cards = [];\n        for (let i = 0; i < this.state.totalzones; i++) {\n\n            cards.push(<Material_Card zone={this.state.zone[i]}\n                                      rows={this.state.totalrows[i]}\n                                      today={date}\n                                      accap={this.state.accap[i]}\n                                      dccap={this.state.dccap[i]}\n                                      progress={this.state.progress[i]}\n                                      onCardClicked={this.onCardClicked}\n            />);\n        }\n\n        return (\n            <div>\n                <FinalNav fname={this.props.fname}\n                          role={this.props.role}\n                          plants={this.props.plants}\n                          pr={this.pr}\n                          handler1={this.handler2}\n                          number={this.state.zone}\n                          plantstats={false}\n                          handle={this.handler3}\n                          setplant={this.setPlant}\n                />\n                <div id='least' className='fill least'>\n                    {cards}\n                </div>\n                <div id='keast' className='fill surya least'>\n                    {this.state.details}\n                    <Button onClick={this.onButtonClicked1} variant=\"contained\" className=\"outlined-button\" color=\"primary\">\n                        Get Data For another Zone\n                    </Button>\n                </div>\n                <div id='beast' className='fill surya least'>\n                    {this.state.data}\n                    <Button onClick={this.onButtonClicked2} variant=\"contained\" className=\"outlined-button\" color=\"primary\">\n                        Get Data For another Block\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n\n    onNumberFixed(event) {\n        this.setState({\n            zone: Number(event.target.value),\n        });\n    }\n\n    onCycleFixed(event) {\n        this.setState({\n            current: Number(event.target.value),\n        });\n    }\n\n    onRowFixed(event) {\n        this.setState({\n            row: Number(event.target.value),\n        });\n    }\n\n    onButtonClicked1(e){\n        e.preventDefault();\n        document.getElementById('least').style.display = 'grid';\n        document.getElementById('keast').style.display = 'none';\n        document.getElementById('beast').style.display = 'none';\n    }\n\n    onButtonClicked2(e){\n        e.preventDefault();\n        document.getElementById('least').style.display = 'none';\n        document.getElementById('keast').style.display = 'grid';\n        document.getElementById('beast').style.display = 'none';\n    }\n\n    onButtonClicked(e, block, inverter, smb){\n        e.preventDefault();\n        fetch(\"http://localhost:3000/getblockdata\",{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                plant : this.state.plant,\n                zone : this.state.zoneIndividual,\n                block : block,\n                cycle : this.state.cycle,\n                startDate : this.state.startDate,\n                inverter : inverter,\n                smb : smb,\n            })\n        }).then(res=>res.json())\n            .then(delta => {\n                console.log(delta);\n                let del = [];\n                delta.map((delt, i) => {\n                    let b = <BlockStats\n                                row={i+1}\n                                fmod={delt[\"fmod\"]}\n                                cleanStatus={delt[\"cleanstatus\"]}\n                                updateDate={delt[\"updateDate\"]}\n                                updateTime={delt[\"updateTime\"]}\n                                comments={delt[\"comments\"]}\n                            />;\n                    del.push(b);\n                });\n                this.setStateSynchronous({\n                    data: del,\n                });\n            });\n        document.getElementById('least').style.display = 'none';\n        document.getElementById('keast').style.display = 'none';\n        document.getElementById('beast').style.display = 'grid';\n    }\n\n    onCardClicked(int) {\n        console.log(int);\n        let blocks = [];\n        let totalrows = [];\n        let totalmod = [];\n        let inverters = [];\n        let smb = [];\n        let fmod = [];\n        let tmod = [];\n        let wp = [];\n        this.setState({\n            zoneIndividual : int,\n        });\n        fetch('http://localhost:3000/blockdata',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                \"plant\" : this.state.plant,\n                \"zone\" : int\n            })\n        })\n        .then(res => res.json())\n            .then(hell => {\n                hell.map((hel, i) => {\n                    blocks.push(hel[\"blockname\"]);\n                    totalrows.push(hel[\"totalrows\"]);\n                    totalmod.push(hel[\"totalmodules\"]);\n                    inverters.push(hel[\"inverter\"]);\n                    smb.push(hel[\"smb\"]);\n                    fmod.push(hel[\"_40mrows\"]);\n                    tmod.push(hel[\"_20mrows\"]);\n                    wp.push(hel[\"wp\"]);\n                });\n                let deta = [];\n                for (let i = 0; i < blocks.length; i++) {\n                    deta.push(<ZoneDetails\n                        block={blocks[i]}\n                        totalrows={totalrows[i]}\n                        totalmod={totalmod[i]}\n                        inv={inverters[i]}\n                        smb={smb[i]}\n                        fmod={fmod[i]}\n                        tmod={tmod[i]}\n                        wp={wp[i]}\n                        zone={int}\n                        onButton={this.onButtonClicked}\n                    />)\n                }\n                this.setStateSynchronous({\n                    details: deta,\n                }).then(deter => {\n                    document.getElementById('least').style.display = 'none';\n                    document.getElementById('beast').style.display = 'none';\n                    document.getElementById('keast').style.display = 'grid';\n                });\n            })\n\n    }\n}\n\nexport default withRouter(ZoneStats);"]},"metadata":{},"sourceType":"module"}