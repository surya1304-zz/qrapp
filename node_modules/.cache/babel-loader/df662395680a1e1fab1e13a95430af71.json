{"ast":null,"code":"import _classCallCheck from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Creating/CreatePlant.js\";\nimport React, { Component } from 'react';\nimport PlantForm from './PlantForm';\nimport './createplant.css';\nimport { TextField, Typography, Button } from \"@material-ui/core\";\n\nvar CreatePlant =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CreatePlant, _Component);\n\n  function CreatePlant(props) {\n    var _this;\n\n    _classCallCheck(this, CreatePlant);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CreatePlant).call(this, props));\n    _this.i = 1;\n    _this.state = {\n      blockname: [],\n      totalrows: [],\n      zone: [],\n      inverter: [],\n      smb: [],\n      _40mrows: [],\n      _20mrows: [],\n      wp: [],\n      totalmodules: [],\n      textfields: [],\n      plant: ''\n    };\n    _this.setStateSynchronous = _this.setStateSynchronous.bind(_assertThisInitialized(_this));\n    _this.addAnotherRow = _this.addAnotherRow.bind(_assertThisInitialized(_this));\n    _this.plantname = _this.plantname.bind(_assertThisInitialized(_this));\n    _this.onSubmitClicked = _this.onSubmitClicked.bind(_assertThisInitialized(_this));\n    _this.doneAdding = _this.doneAdding.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CreatePlant, [{\n    key: \"setStateSynchronous\",\n    value: function setStateSynchronous(stateUpdate) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.setState(stateUpdate, function () {\n          return resolve();\n        });\n      });\n    }\n  }, {\n    key: \"addAnotherRow\",\n    value: function addAnotherRow(values) {\n      var _this3 = this;\n\n      var blockname = values.blockname,\n          totalrows = values.totalrows,\n          zone = values.zone,\n          inverter = values.inverter,\n          smb = values.smb,\n          _40mrows = values._40mrows,\n          _20mrows = values._20mrows,\n          wp = values.wp;\n      var a = this.state.blockname;\n      var b = this.state.totalrows;\n      var c = this.state.zone;\n      var d = this.state.inverter;\n      var f = this.state.smb;\n      var g = this.state._40mrows;\n      var h = this.state._20mrows;\n      var i = this.state.wp;\n      var j = this.state.totalmodules;\n      var totalMods = _40mrows * 40 + _20mrows * 20;\n      a.push(blockname);\n      b.push(totalrows);\n      c.push(zone);\n      d.push(inverter);\n      f.push(smb);\n      g.push(_40mrows);\n      h.push(_20mrows);\n      i.push(wp);\n      j.push(totalMods);\n      this.setStateSynchronous({\n        blockname: a,\n        totalrows: b,\n        zone: c,\n        inverter: d,\n        smb: f,\n        _40mrows: g,\n        _20mrows: h,\n        wp: i,\n        totalmodules: j\n      }).then(function (lotte) {\n        _this3.i += 1;\n        var p = _this3.state.textfields;\n        p.push(React.createElement(PlantForm, {\n          key: _this3.i,\n          AddHandler: _this3.addAnotherRow,\n          done: _this3.doneAdding,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }));\n\n        _this3.setStateSynchronous({\n          textfields: p\n        });\n      });\n    }\n  }, {\n    key: \"doneAdding\",\n    value: function doneAdding(values) {\n      var blockname = values.blockname,\n          totalrows = values.totalrows,\n          zone = values.zone,\n          inverter = values.inverter,\n          smb = values.smb,\n          _40mrows = values._40mrows,\n          _20mrows = values._20mrows,\n          wp = values.wp;\n      var a = this.state.blockname;\n      var b = this.state.totalrows;\n      var c = this.state.zone;\n      var d = this.state.inverter;\n      var f = this.state.smb;\n      var g = this.state._40mrows;\n      var h = this.state._20mrows;\n      var i = this.state.wp;\n      var j = this.state.totalmodules;\n      var totalMods = _40mrows * 40 + _20mrows * 20;\n      a.push(blockname);\n      b.push(totalrows);\n      c.push(zone);\n      d.push(inverter);\n      f.push(smb);\n      g.push(_40mrows);\n      h.push(_20mrows);\n      i.push(wp);\n      j.push(totalMods);\n      this.setStateSynchronous({\n        blockname: a,\n        totalrows: b,\n        zone: c,\n        inverter: d,\n        smb: f,\n        _40mrows: g,\n        _20mrows: h,\n        wp: i,\n        totalmodules: j\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        id: \"hello123\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Enter the Plant Name: \"), React.createElement(TextField, {\n        required: true,\n        id: \"outlined-required\",\n        label: \"Plant Name\",\n        margin: \"normal\",\n        variant: \"outlined\",\n        onChange: this.plantname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), React.createElement(Typography, {\n        id: \"PlantDetails\",\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Enter the Plant Details\"), React.createElement(PlantForm, {\n        key: 1,\n        AddHandler: this.addAnotherRow,\n        done: this.doneAdding,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), this.state.textfields.map(function (hel, i) {\n        return hel;\n      }), React.createElement(\"div\", {\n        id: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"contained\",\n        color: \"secondary\",\n        onClick: this.onSubmitClicked,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Create Plant\")));\n    }\n  }, {\n    key: \"plantname\",\n    value: function plantname(e) {\n      this.setStateSynchronous({\n        plant: e.target.value\n      });\n    }\n  }, {\n    key: \"onSubmitClicked\",\n    value: function onSubmitClicked(e) {\n      e.preventDefault();\n      fetch('http://localhost:3000/createplant', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          blocks: this.state.blockname,\n          totalrows: this.state.totalrows,\n          zone: this.state.zone,\n          inverter: this.state.inverter,\n          smb: this.state.inverter,\n          _40mrows: this.state._40mrows,\n          _20mrows: this.state._20mrows,\n          wp: this.state.wp,\n          totalmodules: this.state.totalmodules,\n          plant: this.state.plant\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (stark) {\n        alert(\"The Plant is created\");\n      });\n    }\n  }]);\n\n  return CreatePlant;\n}(Component);\n\nexport default CreatePlant;","map":{"version":3,"sources":["/Users/indukurisuryasaiharischyandraprasad/WebstormProjects/hello1/src/Creating/CreatePlant.js"],"names":["React","Component","PlantForm","TextField","Typography","Button","CreatePlant","props","i","state","blockname","totalrows","zone","inverter","smb","_40mrows","_20mrows","wp","totalmodules","textfields","plant","setStateSynchronous","bind","addAnotherRow","plantname","onSubmitClicked","doneAdding","stateUpdate","Promise","resolve","setState","values","a","b","c","d","f","g","h","j","totalMods","push","then","lotte","p","map","hel","e","target","value","preventDefault","fetch","method","headers","body","JSON","stringify","blocks","res","json","stark","alert"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,mBAAP;AACA,SAAQC,SAAR,EAAmBC,UAAnB,EAA+BC,MAA/B,QAA4C,mBAA5C;;IAEMC,W;;;;;AAEF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;AADe,UAqBnBC,CArBmB,GAqBjB,CArBiB;AAEf,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAG,EADH;AAETC,MAAAA,SAAS,EAAG,EAFH;AAGTC,MAAAA,IAAI,EAAG,EAHE;AAITC,MAAAA,QAAQ,EAAG,EAJF;AAKTC,MAAAA,GAAG,EAAG,EALG;AAMTC,MAAAA,QAAQ,EAAG,EANF;AAOTC,MAAAA,QAAQ,EAAG,EAPF;AAQTC,MAAAA,EAAE,EAAG,EARI;AASTC,MAAAA,YAAY,EAAG,EATN;AAUTC,MAAAA,UAAU,EAAG,EAVJ;AAWTC,MAAAA,KAAK,EAAG;AAXC,KAAb;AAaA,UAAKC,mBAAL,GAA2B,MAAKA,mBAAL,CAAyBC,IAAzB,+BAA3B;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,+BAArB;AACA,UAAKE,SAAL,GAAiB,MAAKA,SAAL,CAAeF,IAAf,+BAAjB;AACA,UAAKG,eAAL,GAAuB,MAAKA,eAAL,CAAqBH,IAArB,+BAAvB;AACA,UAAKI,UAAL,GAAkB,MAAKA,UAAL,CAAgBJ,IAAhB,+BAAlB;AAnBe;AAoBlB;;;;wCAGmBK,W,EAAa;AAAA;;AAC7B,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC1B,QAAA,MAAI,CAACC,QAAL,CAAcH,WAAd,EAA2B;AAAA,iBAAME,OAAO,EAAb;AAAA,SAA3B;AACH,OAFM,CAAP;AAGH;;;kCAEaE,M,EAAO;AAAA;;AAAA,UACTrB,SADS,GACsDqB,MADtD,CACTrB,SADS;AAAA,UACCC,SADD,GACsDoB,MADtD,CACCpB,SADD;AAAA,UACWC,IADX,GACsDmB,MADtD,CACWnB,IADX;AAAA,UACgBC,QADhB,GACsDkB,MADtD,CACgBlB,QADhB;AAAA,UACyBC,GADzB,GACsDiB,MADtD,CACyBjB,GADzB;AAAA,UAC6BC,QAD7B,GACsDgB,MADtD,CAC6BhB,QAD7B;AAAA,UACsCC,QADtC,GACsDe,MADtD,CACsCf,QADtC;AAAA,UAC+CC,EAD/C,GACsDc,MADtD,CAC+Cd,EAD/C;AAEjB,UAAMe,CAAC,GAAG,KAAKvB,KAAL,CAAWC,SAArB;AACA,UAAMuB,CAAC,GAAG,KAAKxB,KAAL,CAAWE,SAArB;AACA,UAAMuB,CAAC,GAAG,KAAKzB,KAAL,CAAWG,IAArB;AACA,UAAMuB,CAAC,GAAG,KAAK1B,KAAL,CAAWI,QAArB;AACA,UAAMuB,CAAC,GAAG,KAAK3B,KAAL,CAAWK,GAArB;AACA,UAAMuB,CAAC,GAAG,KAAK5B,KAAL,CAAWM,QAArB;AACA,UAAMuB,CAAC,GAAG,KAAK7B,KAAL,CAAWO,QAArB;AACA,UAAMR,CAAC,GAAG,KAAKC,KAAL,CAAWQ,EAArB;AACA,UAAMsB,CAAC,GAAG,KAAK9B,KAAL,CAAWS,YAArB;AACA,UAAIsB,SAAS,GAAGzB,QAAQ,GAAC,EAAT,GAAcC,QAAQ,GAAC,EAAvC;AAEAgB,MAAAA,CAAC,CAACS,IAAF,CAAO/B,SAAP;AACAuB,MAAAA,CAAC,CAACQ,IAAF,CAAO9B,SAAP;AACAuB,MAAAA,CAAC,CAACO,IAAF,CAAO7B,IAAP;AACAuB,MAAAA,CAAC,CAACM,IAAF,CAAO5B,QAAP;AACAuB,MAAAA,CAAC,CAACK,IAAF,CAAO3B,GAAP;AACAuB,MAAAA,CAAC,CAACI,IAAF,CAAO1B,QAAP;AACAuB,MAAAA,CAAC,CAACG,IAAF,CAAOzB,QAAP;AACAR,MAAAA,CAAC,CAACiC,IAAF,CAAOxB,EAAP;AACAsB,MAAAA,CAAC,CAACE,IAAF,CAAOD,SAAP;AAEA,WAAKnB,mBAAL,CAAyB;AACrBX,QAAAA,SAAS,EAAGsB,CADS;AAErBrB,QAAAA,SAAS,EAAGsB,CAFS;AAGrBrB,QAAAA,IAAI,EAAGsB,CAHc;AAIrBrB,QAAAA,QAAQ,EAAGsB,CAJU;AAKrBrB,QAAAA,GAAG,EAAGsB,CALe;AAMrBrB,QAAAA,QAAQ,EAAGsB,CANU;AAOrBrB,QAAAA,QAAQ,EAAGsB,CAPU;AAQrBrB,QAAAA,EAAE,EAAGT,CARgB;AASrBU,QAAAA,YAAY,EAAGqB;AATM,OAAzB,EAUGG,IAVH,CAUQ,UAAAC,KAAK,EAAI;AACb,QAAA,MAAI,CAACnC,CAAL,IAAU,CAAV;AACA,YAAIoC,CAAC,GAAG,MAAI,CAACnC,KAAL,CAAWU,UAAnB;AACAyB,QAAAA,CAAC,CAACH,IAAF,CAAO,oBAAC,SAAD;AACH,UAAA,GAAG,EAAE,MAAI,CAACjC,CADP;AAEH,UAAA,UAAU,EAAE,MAAI,CAACe,aAFd;AAGH,UAAA,IAAI,EAAE,MAAI,CAACG,UAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;;AAKA,QAAA,MAAI,CAACL,mBAAL,CAAyB;AACrBF,UAAAA,UAAU,EAAGyB;AADQ,SAAzB;AAGH,OArBD;AAsBH;;;+BAEUb,M,EAAQ;AAAA,UACRrB,SADQ,GAC6DqB,MAD7D,CACRrB,SADQ;AAAA,UACGC,SADH,GAC6DoB,MAD7D,CACGpB,SADH;AAAA,UACcC,IADd,GAC6DmB,MAD7D,CACcnB,IADd;AAAA,UACoBC,QADpB,GAC6DkB,MAD7D,CACoBlB,QADpB;AAAA,UAC8BC,GAD9B,GAC6DiB,MAD7D,CAC8BjB,GAD9B;AAAA,UACmCC,QADnC,GAC6DgB,MAD7D,CACmChB,QADnC;AAAA,UAC6CC,QAD7C,GAC6De,MAD7D,CAC6Cf,QAD7C;AAAA,UACuDC,EADvD,GAC6Dc,MAD7D,CACuDd,EADvD;AAEf,UAAMe,CAAC,GAAG,KAAKvB,KAAL,CAAWC,SAArB;AACA,UAAMuB,CAAC,GAAG,KAAKxB,KAAL,CAAWE,SAArB;AACA,UAAMuB,CAAC,GAAG,KAAKzB,KAAL,CAAWG,IAArB;AACA,UAAMuB,CAAC,GAAG,KAAK1B,KAAL,CAAWI,QAArB;AACA,UAAMuB,CAAC,GAAG,KAAK3B,KAAL,CAAWK,GAArB;AACA,UAAMuB,CAAC,GAAG,KAAK5B,KAAL,CAAWM,QAArB;AACA,UAAMuB,CAAC,GAAG,KAAK7B,KAAL,CAAWO,QAArB;AACA,UAAMR,CAAC,GAAG,KAAKC,KAAL,CAAWQ,EAArB;AACA,UAAMsB,CAAC,GAAG,KAAK9B,KAAL,CAAWS,YAArB;AACA,UAAIsB,SAAS,GAAGzB,QAAQ,GAAG,EAAX,GAAgBC,QAAQ,GAAG,EAA3C;AAEAgB,MAAAA,CAAC,CAACS,IAAF,CAAO/B,SAAP;AACAuB,MAAAA,CAAC,CAACQ,IAAF,CAAO9B,SAAP;AACAuB,MAAAA,CAAC,CAACO,IAAF,CAAO7B,IAAP;AACAuB,MAAAA,CAAC,CAACM,IAAF,CAAO5B,QAAP;AACAuB,MAAAA,CAAC,CAACK,IAAF,CAAO3B,GAAP;AACAuB,MAAAA,CAAC,CAACI,IAAF,CAAO1B,QAAP;AACAuB,MAAAA,CAAC,CAACG,IAAF,CAAOzB,QAAP;AACAR,MAAAA,CAAC,CAACiC,IAAF,CAAOxB,EAAP;AACAsB,MAAAA,CAAC,CAACE,IAAF,CAAOD,SAAP;AAEA,WAAKnB,mBAAL,CAAyB;AACrBX,QAAAA,SAAS,EAAEsB,CADU;AAErBrB,QAAAA,SAAS,EAAEsB,CAFU;AAGrBrB,QAAAA,IAAI,EAAEsB,CAHe;AAIrBrB,QAAAA,QAAQ,EAAEsB,CAJW;AAKrBrB,QAAAA,GAAG,EAAEsB,CALgB;AAMrBrB,QAAAA,QAAQ,EAAEsB,CANW;AAOrBrB,QAAAA,QAAQ,EAAEsB,CAPW;AAQrBrB,QAAAA,EAAE,EAAET,CARiB;AASrBU,QAAAA,YAAY,EAAEqB;AATO,OAAzB;AAWH;;;6BAEQ;AACL,aACI;AAAK,QAAA,EAAE,EAAC,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,UAAD;AAAY,QAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCADJ,EAEI,oBAAC,SAAD;AACA,QAAA,QAAQ,MADR;AAEA,QAAA,EAAE,EAAC,mBAFH;AAGA,QAAA,KAAK,EAAC,YAHN;AAIA,QAAA,MAAM,EAAC,QAJP;AAKA,QAAA,OAAO,EAAC,UALR;AAMA,QAAA,QAAQ,EAAE,KAAKf,SANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,EAUA,oBAAC,UAAD;AAAY,QAAA,EAAE,EAAC,cAAf;AAA8B,QAAA,OAAO,EAAC,IAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAVA,EAWA,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAE,CAAhB;AAAmB,QAAA,UAAU,EAAE,KAAKD,aAApC;AAAmD,QAAA,IAAI,EAAE,KAAKG,UAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXA,CADJ,EAcK,KAAKjB,KAAL,CAAWU,UAAX,CAAsB0B,GAAtB,CAA0B,UAACC,GAAD,EAAKtC,CAAL,EAAS;AAChC,eAAOsC,GAAP;AACH,OAFA,CAdL,EAiBI;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,WAAlC;AAA8C,QAAA,OAAO,EAAE,KAAKrB,eAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,CAjBJ,CADJ;AAuBH;;;8BAESsB,C,EAAG;AACT,WAAK1B,mBAAL,CAAyB;AACrBD,QAAAA,KAAK,EAAG2B,CAAC,CAACC,MAAF,CAASC;AADI,OAAzB;AAGH;;;oCAEeF,C,EAChB;AACIA,MAAAA,CAAC,CAACG,cAAF;AACAC,MAAAA,KAAK,CAAC,mCAAD,EAAqC;AACtCC,QAAAA,MAAM,EAAG,MAD6B;AAEtCC,QAAAA,OAAO,EAAG;AACN,0BAAiB;AADX,SAF4B;AAKtCC,QAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAClBC,UAAAA,MAAM,EAAG,KAAKhD,KAAL,CAAWC,SADF;AAElBC,UAAAA,SAAS,EAAG,KAAKF,KAAL,CAAWE,SAFL;AAGlBC,UAAAA,IAAI,EAAG,KAAKH,KAAL,CAAWG,IAHA;AAIlBC,UAAAA,QAAQ,EAAG,KAAKJ,KAAL,CAAWI,QAJJ;AAKlBC,UAAAA,GAAG,EAAG,KAAKL,KAAL,CAAWI,QALC;AAMlBE,UAAAA,QAAQ,EAAG,KAAKN,KAAL,CAAWM,QANJ;AAOlBC,UAAAA,QAAQ,EAAG,KAAKP,KAAL,CAAWO,QAPJ;AAQlBC,UAAAA,EAAE,EAAG,KAAKR,KAAL,CAAWQ,EARE;AASlBC,UAAAA,YAAY,EAAG,KAAKT,KAAL,CAAWS,YATR;AAUlBE,UAAAA,KAAK,EAAG,KAAKX,KAAL,CAAWW;AAVD,SAAf;AAL+B,OAArC,CAAL,CAkBKsB,IAlBL,CAkBU,UAAAgB,GAAG;AAAA,eAAEA,GAAG,CAACC,IAAJ,EAAF;AAAA,OAlBb,EAmBKjB,IAnBL,CAmBU,UAAAkB,KAAK,EAAG;AACVC,QAAAA,KAAK,CAAC,sBAAD,CAAL;AAEH,OAtBL;AAwBH;;;;EA7KqB5D,S;;AAgL1B,eAAeK,WAAf","sourcesContent":["import React,{Component} from 'react';\nimport PlantForm from './PlantForm';\nimport './createplant.css';\nimport {TextField, Typography, Button} from \"@material-ui/core\";\n\nclass CreatePlant extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            blockname : [],\n            totalrows : [],\n            zone : [],\n            inverter : [],\n            smb : [],\n            _40mrows : [],\n            _20mrows : [],\n            wp : [],\n            totalmodules : [],\n            textfields : [],\n            plant : '',\n        };\n        this.setStateSynchronous = this.setStateSynchronous.bind(this);\n        this.addAnotherRow = this.addAnotherRow.bind(this);\n        this.plantname = this.plantname.bind(this);\n        this.onSubmitClicked = this.onSubmitClicked.bind(this);\n        this.doneAdding = this.doneAdding.bind(this);\n    }\n    i=1;\n\n    setStateSynchronous(stateUpdate) {\n        return new Promise(resolve => {\n            this.setState(stateUpdate, () => resolve());\n        });\n    }\n\n    addAnotherRow(values){\n        const { blockname,totalrows,zone,inverter,smb,_40mrows,_20mrows,wp } = values;\n        const a = this.state.blockname;\n        const b = this.state.totalrows;\n        const c = this.state.zone;\n        const d = this.state.inverter;\n        const f = this.state.smb;\n        const g = this.state._40mrows;\n        const h = this.state._20mrows;\n        const i = this.state.wp;\n        const j = this.state.totalmodules;\n        let totalMods = _40mrows*40 + _20mrows*20;\n\n        a.push(blockname);\n        b.push(totalrows);\n        c.push(zone);\n        d.push(inverter);\n        f.push(smb);\n        g.push(_40mrows);\n        h.push(_20mrows);\n        i.push(wp);\n        j.push(totalMods);\n\n        this.setStateSynchronous({\n            blockname : a,\n            totalrows : b,\n            zone : c,\n            inverter : d,\n            smb : f,\n            _40mrows : g,\n            _20mrows : h,\n            wp : i,\n            totalmodules : j,\n        }).then(lotte => {\n            this.i += 1;\n            let p = this.state.textfields;\n            p.push(<PlantForm\n                key={this.i}\n                AddHandler={this.addAnotherRow}\n                done={this.doneAdding}\n            />);\n            this.setStateSynchronous({\n                textfields : p,\n            });\n        });\n    }\n\n    doneAdding(values) {\n        const {blockname, totalrows, zone, inverter, smb, _40mrows, _20mrows, wp} = values;\n        const a = this.state.blockname;\n        const b = this.state.totalrows;\n        const c = this.state.zone;\n        const d = this.state.inverter;\n        const f = this.state.smb;\n        const g = this.state._40mrows;\n        const h = this.state._20mrows;\n        const i = this.state.wp;\n        const j = this.state.totalmodules;\n        let totalMods = _40mrows * 40 + _20mrows * 20;\n\n        a.push(blockname);\n        b.push(totalrows);\n        c.push(zone);\n        d.push(inverter);\n        f.push(smb);\n        g.push(_40mrows);\n        h.push(_20mrows);\n        i.push(wp);\n        j.push(totalMods);\n\n        this.setStateSynchronous({\n            blockname: a,\n            totalrows: b,\n            zone: c,\n            inverter: d,\n            smb: f,\n            _40mrows: g,\n            _20mrows: h,\n            wp: i,\n            totalmodules: j,\n        });\n    }\n\n    render() {\n        return (\n            <div id='hello123'>\n                <div>\n                    <Typography variant=\"h5\">Enter the Plant Name: </Typography>\n                    <TextField\n                    required\n                    id=\"outlined-required\"\n                    label=\"Plant Name\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    onChange={this.plantname}\n                    />\n                <Typography id=\"PlantDetails\" variant=\"h6\" >Enter the Plant Details</Typography>\n                <PlantForm key={1} AddHandler={this.addAnotherRow} done={this.doneAdding}/>\n                </div>\n                {this.state.textfields.map((hel,i)=>{\n                    return hel\n                })}\n                <div id='submit'>\n                    <Button variant='contained' color='secondary' onClick={this.onSubmitClicked}>Create Plant</Button>\n                </div>\n            </div>\n        );\n    }\n\n    plantname(e) {\n        this.setStateSynchronous({\n            plant : e.target.value,\n        })\n    }\n\n    onSubmitClicked(e)\n    {\n        e.preventDefault();\n        fetch('http://localhost:3000/createplant',{\n            method : 'post',\n            headers : {\n                'Content-Type' : 'application/json',\n            },\n            body : JSON.stringify({\n                blocks : this.state.blockname,\n                totalrows : this.state.totalrows,\n                zone : this.state.zone,\n                inverter : this.state.inverter,\n                smb : this.state.inverter,\n                _40mrows : this.state._40mrows,\n                _20mrows : this.state._20mrows,\n                wp : this.state.wp,\n                totalmodules : this.state.totalmodules,\n                plant : this.state.plant,\n            }),\n        })\n            .then(res=>res.json())\n            .then(stark=> {\n                alert(\"The Plant is created\");\n\n            });\n\n    }\n}\n\nexport default CreatePlant;"]},"metadata":{},"sourceType":"module"}