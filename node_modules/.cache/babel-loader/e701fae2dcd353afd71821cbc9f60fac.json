{"ast":null,"code":"/**\n * @fileoverview Http request in node.js\n * @author douzi <liaowei08@gmail.com> \n */\nvar http = require('http');\n\nvar util = require('utils-extend');\n\nvar url = require('url');\n\nvar path = require('path');\n\nvar querystring = require('querystring');\n\nvar file = require('file-system');\n/**\n * @description\n * http request\n * @param {object|string} [options]\n * @param {function} [callback]\n * @example\n * request('url', function(err, res, body) { });\n * request({url: '', headers: {}, method: 'POST'}, function(err, res, body) { });\n */\n\n\nfunction request(options, callback) {\n  var opts = {\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    method: 'GET',\n    encoding: 'utf8',\n    // If the callback body is buffer, it can hanlder document pipe simply\n    isBuffer: false,\n    json: false\n  };\n\n  if (util.isString(options)) {\n    opts.url = options;\n  } else {\n    util.extend(opts, options);\n  } // Append request data\n\n\n  if (opts.data) {\n    if (opts.method === 'GET') {\n      opts.url += '?' + querystring.stringify(opts.data);\n    } else {\n      opts.data = JSON.stringify(opts.data);\n      opts.headers['Content-Length'] = new Buffer(opts.data).length;\n    }\n  } // Extend request url object\n\n\n  util.extend(opts, util.pick(url.parse(opts.url), 'hostname', 'port', 'path', 'auth'));\n  delete opts.url;\n  var req = http.request(opts, function (res) {\n    var body = [];\n    var size = 0;\n    res.on('data', function (chunk) {\n      body.push(chunk);\n      size += chunk.length;\n    });\n    res.on('end', function () {\n      var result = ''; // Buffer\n\n      if (opts.isBuffer) {\n        result = Buffer.concat(body, size);\n      } else {\n        var buffer = new Buffer(size);\n\n        for (var i = 0, pos = 0, l = body.length; i < l; i++) {\n          var chunk = body[i];\n          chunk.copy(buffer, pos);\n          pos += chunk.length;\n        }\n\n        result = buffer.toString(opts.encoding);\n\n        if (opts.json) {\n          result = JSON.parse(result);\n        }\n      }\n\n      callback(null, res, result);\n    });\n  });\n  req.on('error', callback);\n\n  if (opts.method !== 'GET' && opts.data) {\n    req.write(opts.data);\n  }\n\n  req.end();\n}\n/**\n * @description\n * @example\n * request.post('url', function() {});\n * request.post({ url: 'url', data: { q1: 'v1' }}, function() {});\n */\n\n\nrequest.post = function (options, callback) {\n  if (util.isString(options)) {\n    options = {\n      url: options\n    };\n  }\n\n  options.method = 'POST';\n  request(options, callback);\n};\n/**\n * @description\n * Download remote resurce to local file\n * @example\n * request.download({ url: 'path.png' }, function(err, res, body, filepath) {})\n * request.download({ \n    url: 'path.png',\n    rootPath: 'dest/path' \n   }, function(err, res, body, filepath) {\n    \n   });\n */\n\n\nrequest.download = function (options, callback) {\n  var opts = util.extend({\n    rootPath: '',\n    ignore: false\n  }, options);\n  request({\n    url: opts.url,\n    isBuffer: true\n  }, function (err, res, body) {\n    if (err) return callback(err);\n    if (res.statusCode !== 200) return callback(err, res, body);\n    var destPath;\n    var pathname = url.parse(options.url).pathname.replace(/^\\//, '');\n\n    if (opts.destPath) {\n      if (util.isFunction(opts.destPath)) {\n        destPath = opts.destPath(path.basename(pathname));\n      } else {\n        destPath = opts.destPath;\n      }\n    } else {\n      destPath = path.join(options.rootPath, pathname);\n    }\n\n    if (opts.ignore) {\n      destPath = destPath.toLowerCase();\n    }\n\n    file.writeFile(destPath, body, function (err) {\n      if (err) return callback(err);\n      callback(null, res, body, destPath);\n    });\n  });\n};\n\nmodule.exports = request;","map":null,"metadata":{},"sourceType":"script"}