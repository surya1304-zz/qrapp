{"ast":null,"code":"/**\n * covert canvas to image\n * and save the image file\n */\nvar Canvas2Image = function () {\n  // check if support sth.\n  var $support = function () {\n    var canvas = document.createElement('canvas'),\n        ctx = canvas.getContext('2d');\n    return {\n      canvas: !!ctx,\n      imageData: !!ctx.getImageData,\n      dataURL: !!canvas.toDataURL,\n      btoa: !!window.btoa\n    };\n  }();\n\n  var downloadMime = 'image/octet-stream';\n\n  function scaleCanvas(canvas, width, height) {\n    var w = canvas.width,\n        h = canvas.height;\n\n    if (width == undefined) {\n      width = w;\n    }\n\n    if (height == undefined) {\n      height = h;\n    }\n\n    var retCanvas = document.createElement('canvas');\n    var retCtx = retCanvas.getContext('2d');\n    retCanvas.width = width;\n    retCanvas.height = height;\n    retCtx.drawImage(canvas, 0, 0, w, h, 0, 0, width, height);\n    return retCanvas;\n  }\n\n  function getDataURL(canvas, type, width, height) {\n    canvas = scaleCanvas(canvas, width, height);\n    return canvas.toDataURL(type);\n  }\n\n  function saveFile(strData) {\n    document.location.href = strData;\n  }\n\n  function genImage(strData) {\n    var img = document.createElement('img');\n    img.src = strData;\n    return img;\n  }\n\n  function fixType(type) {\n    type = type.toLowerCase().replace(/jpg/i, 'jpeg');\n    var r = type.match(/png|jpeg|bmp|gif/)[0];\n    return 'image/' + r;\n  }\n\n  function encodeData(data) {\n    if (!window.btoa) {\n      throw 'btoa undefined';\n    }\n\n    var str = '';\n\n    if (typeof data == 'string') {\n      str = data;\n    } else {\n      for (var i = 0; i < data.length; i++) {\n        str += String.fromCharCode(data[i]);\n      }\n    }\n\n    return btoa(str);\n  }\n\n  function getImageData(canvas) {\n    var w = canvas.width,\n        h = canvas.height;\n    return canvas.getContext('2d').getImageData(0, 0, w, h);\n  }\n\n  function makeURI(strData, type) {\n    return 'data:' + type + ';base64,' + strData;\n  }\n  /**\n   * create bitmap image\n   * 按照规则生成图片响应头和响应体\n   */\n\n\n  var genBitmapImage = function genBitmapImage(oData) {\n    //\n    // BITMAPFILEHEADER: http://msdn.microsoft.com/en-us/library/windows/desktop/dd183374(v=vs.85).aspx\n    // BITMAPINFOHEADER: http://msdn.microsoft.com/en-us/library/dd183376.aspx\n    //\n    var biWidth = oData.width;\n    var biHeight = oData.height;\n    var biSizeImage = biWidth * biHeight * 3;\n    var bfSize = biSizeImage + 54; // total header size = 54 bytes\n    //\n    //  typedef struct tagBITMAPFILEHEADER {\n    //  \tWORD bfType;\n    //  \tDWORD bfSize;\n    //  \tWORD bfReserved1;\n    //  \tWORD bfReserved2;\n    //  \tDWORD bfOffBits;\n    //  } BITMAPFILEHEADER;\n    //\n\n    var BITMAPFILEHEADER = [// WORD bfType -- The file type signature; must be \"BM\"\n    0x42, 0x4D, // DWORD bfSize -- The size, in bytes, of the bitmap file\n    bfSize & 0xff, bfSize >> 8 & 0xff, bfSize >> 16 & 0xff, bfSize >> 24 & 0xff, // WORD bfReserved1 -- Reserved; must be zero\n    0, 0, // WORD bfReserved2 -- Reserved; must be zero\n    0, 0, // DWORD bfOffBits -- The offset, in bytes, from the beginning of the BITMAPFILEHEADER structure to the bitmap bits.\n    54, 0, 0, 0]; //\n    //  typedef struct tagBITMAPINFOHEADER {\n    //  \tDWORD biSize;\n    //  \tLONG  biWidth;\n    //  \tLONG  biHeight;\n    //  \tWORD  biPlanes;\n    //  \tWORD  biBitCount;\n    //  \tDWORD biCompression;\n    //  \tDWORD biSizeImage;\n    //  \tLONG  biXPelsPerMeter;\n    //  \tLONG  biYPelsPerMeter;\n    //  \tDWORD biClrUsed;\n    //  \tDWORD biClrImportant;\n    //  } BITMAPINFOHEADER, *PBITMAPINFOHEADER;\n    //\n\n    var BITMAPINFOHEADER = [// DWORD biSize -- The number of bytes required by the structure\n    40, 0, 0, 0, // LONG biWidth -- The width of the bitmap, in pixels\n    biWidth & 0xff, biWidth >> 8 & 0xff, biWidth >> 16 & 0xff, biWidth >> 24 & 0xff, // LONG biHeight -- The height of the bitmap, in pixels\n    biHeight & 0xff, biHeight >> 8 & 0xff, biHeight >> 16 & 0xff, biHeight >> 24 & 0xff, // WORD biPlanes -- The number of planes for the target device. This value must be set to 1\n    1, 0, // WORD biBitCount -- The number of bits-per-pixel, 24 bits-per-pixel -- the bitmap\n    // has a maximum of 2^24 colors (16777216, Truecolor)\n    24, 0, // DWORD biCompression -- The type of compression, BI_RGB (code 0) -- uncompressed\n    0, 0, 0, 0, // DWORD biSizeImage -- The size, in bytes, of the image. This may be set to zero for BI_RGB bitmaps\n    biSizeImage & 0xff, biSizeImage >> 8 & 0xff, biSizeImage >> 16 & 0xff, biSizeImage >> 24 & 0xff, // LONG biXPelsPerMeter, unused\n    0, 0, 0, 0, // LONG biYPelsPerMeter, unused\n    0, 0, 0, 0, // DWORD biClrUsed, the number of color indexes of palette, unused\n    0, 0, 0, 0, // DWORD biClrImportant, unused\n    0, 0, 0, 0];\n    var iPadding = (4 - biWidth * 3 % 4) % 4;\n    var aImgData = oData.data;\n    var strPixelData = '';\n    var biWidth4 = biWidth << 2;\n    var y = biHeight;\n    var fromCharCode = String.fromCharCode;\n\n    do {\n      var iOffsetY = biWidth4 * (y - 1);\n      var strPixelRow = '';\n\n      for (var x = 0; x < biWidth; x++) {\n        var iOffsetX = x << 2;\n        strPixelRow += fromCharCode(aImgData[iOffsetY + iOffsetX + 2]) + fromCharCode(aImgData[iOffsetY + iOffsetX + 1]) + fromCharCode(aImgData[iOffsetY + iOffsetX]);\n      }\n\n      for (var c = 0; c < iPadding; c++) {\n        strPixelRow += String.fromCharCode(0);\n      }\n\n      strPixelData += strPixelRow;\n    } while (--y);\n\n    var strEncoded = encodeData(BITMAPFILEHEADER.concat(BITMAPINFOHEADER)) + encodeData(strPixelData);\n    return strEncoded;\n  };\n  /**\n   * saveAsImage\n   * @param canvasElement\n   * @param {String} image type\n   * @param {Number} [optional] png width\n   * @param {Number} [optional] png height\n   */\n\n\n  var saveAsImage = function saveAsImage(canvas, width, height, type) {\n    if ($support.canvas && $support.dataURL) {\n      if (typeof canvas == \"string\") {\n        canvas = document.getElementById(canvas);\n      }\n\n      if (type == undefined) {\n        type = 'png';\n      }\n\n      type = fixType(type);\n\n      if (/bmp/.test(type)) {\n        var data = getImageData(scaleCanvas(canvas, width, height));\n        var strData = genBitmapImage(data);\n        saveFile(makeURI(strData, downloadMime));\n      } else {\n        var strData = getDataURL(canvas, type, width, height);\n        saveFile(strData.replace(type, downloadMime));\n      }\n    }\n  };\n\n  var convertToImage = function convertToImage(canvas, width, height, type) {\n    if ($support.canvas && $support.dataURL) {\n      if (typeof canvas == \"string\") {\n        canvas = document.getElementById(canvas);\n      }\n\n      if (type == undefined) {\n        type = 'png';\n      }\n\n      type = fixType(type);\n\n      if (/bmp/.test(type)) {\n        var data = getImageData(scaleCanvas(canvas, width, height));\n        var strData = genBitmapImage(data);\n        return genImage(makeURI(strData, 'image/bmp'));\n      } else {\n        var strData = getDataURL(canvas, type, width, height);\n        return genImage(strData);\n      }\n    }\n  };\n\n  return {\n    saveAsImage: saveAsImage,\n    saveAsPNG: function saveAsPNG(canvas, width, height) {\n      return saveAsImage(canvas, width, height, 'png');\n    },\n    saveAsJPEG: function saveAsJPEG(canvas, width, height) {\n      return saveAsImage(canvas, width, height, 'jpeg');\n    },\n    saveAsGIF: function saveAsGIF(canvas, width, height) {\n      return saveAsImage(canvas, width, height, 'gif');\n    },\n    saveAsBMP: function saveAsBMP(canvas, width, height) {\n      return saveAsImage(canvas, width, height, 'bmp');\n    },\n    convertToImage: convertToImage,\n    convertToPNG: function convertToPNG(canvas, width, height) {\n      return convertToImage(canvas, width, height, 'png');\n    },\n    convertToJPEG: function convertToJPEG(canvas, width, height) {\n      return convertToImage(canvas, width, height, 'jpeg');\n    },\n    convertToGIF: function convertToGIF(canvas, width, height) {\n      return convertToImage(canvas, width, height, 'gif');\n    },\n    convertToBMP: function convertToBMP(canvas, width, height) {\n      return convertToImage(canvas, width, height, 'bmp');\n    }\n  };\n}();","map":null,"metadata":{},"sourceType":"script"}