{"version":3,"sources":["DrawerNavigatorItems.tsx"],"names":["React","View","Text","StyleSheet","SafeAreaView","TouchableItem","DrawerNavigatorItems","items","activeItemKey","activeTintColor","activeBackgroundColor","inactiveTintColor","inactiveBackgroundColor","getLabel","renderIcon","onItemPress","itemsContainerStyle","itemStyle","labelStyle","activeLabelStyle","inactiveLabelStyle","iconContainerStyle","drawerPosition","styles","container","map","route","index","focused","key","color","backgroundColor","scene","tintColor","icon","label","accessibilityLabel","undefined","extraLabelStyle","item","inactiveIcon","defaultProps","create","paddingVertical","flexDirection","alignItems","marginHorizontal","width","opacity","margin","fontWeight"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { View, Text, StyleSheet, ViewStyle, TextStyle } from 'react-native';\nimport { SafeAreaView } from '@react-navigation/native';\nimport TouchableItem from './TouchableItem';\nimport { Scene, Route } from '../types';\n\nexport type Props = {\n  items: Route[];\n  activeItemKey?: string | null;\n  activeTintColor?: string;\n  activeBackgroundColor?: string;\n  inactiveTintColor?: string;\n  inactiveBackgroundColor?: string;\n  getLabel: (scene: Scene) => React.ReactNode;\n  renderIcon: (scene: Scene) => React.ReactNode;\n  onItemPress: (scene: { route: Route; focused: boolean }) => void;\n  itemsContainerStyle?: ViewStyle;\n  itemStyle?: ViewStyle;\n  labelStyle?: TextStyle;\n  activeLabelStyle?: TextStyle;\n  inactiveLabelStyle?: TextStyle;\n  iconContainerStyle?: ViewStyle;\n  drawerPosition: 'left' | 'right';\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nconst DrawerNavigatorItems = ({\n  items,\n  activeItemKey,\n  activeTintColor,\n  activeBackgroundColor,\n  inactiveTintColor,\n  inactiveBackgroundColor,\n  getLabel,\n  renderIcon,\n  onItemPress,\n  itemsContainerStyle,\n  itemStyle,\n  labelStyle,\n  activeLabelStyle,\n  inactiveLabelStyle,\n  iconContainerStyle,\n  drawerPosition,\n}: Props) => (\n  <View style={[styles.container, itemsContainerStyle]}>\n    {items.map((route, index: number) => {\n      const focused = activeItemKey === route.key;\n      const color = focused ? activeTintColor : inactiveTintColor;\n      const backgroundColor = focused\n        ? activeBackgroundColor\n        : inactiveBackgroundColor;\n      const scene = { route, index, focused, tintColor: color };\n      const icon = renderIcon(scene);\n      const label = getLabel(scene);\n      const accessibilityLabel = typeof label === 'string' ? label : undefined;\n      const extraLabelStyle = focused ? activeLabelStyle : inactiveLabelStyle;\n      return (\n        <TouchableItem\n          key={route.key}\n          accessible\n          accessibilityLabel={accessibilityLabel}\n          onPress={() => {\n            onItemPress({ route, focused });\n          }}\n          delayPressIn={0}\n        >\n          <SafeAreaView\n            style={[{ backgroundColor }, styles.item, itemStyle]}\n            forceInset={{\n              [drawerPosition]: 'always',\n              [drawerPosition === 'left' ? 'right' : 'left']: 'never',\n              vertical: 'never',\n            }}\n          >\n            {icon ? (\n              <View\n                style={[\n                  styles.icon,\n                  focused ? null : styles.inactiveIcon,\n                  iconContainerStyle,\n                ]}\n              >\n                {icon}\n              </View>\n            ) : null}\n            {typeof label === 'string' ? (\n              <Text\n                style={[styles.label, { color }, labelStyle, extraLabelStyle]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label\n            )}\n          </SafeAreaView>\n        </TouchableItem>\n      );\n    })}\n  </View>\n);\n\n/* Material design specs - https://material.io/guidelines/patterns/navigation-drawer.html#navigation-drawer-specs */\nDrawerNavigatorItems.defaultProps = {\n  activeTintColor: '#2196f3',\n  activeBackgroundColor: 'rgba(0, 0, 0, .04)',\n  inactiveTintColor: 'rgba(0, 0, 0, .87)',\n  inactiveBackgroundColor: 'transparent',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingVertical: 4,\n  },\n  item: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  icon: {\n    marginHorizontal: 16,\n    width: 24,\n    alignItems: 'center',\n  },\n  inactiveIcon: {\n    /*\n     * Icons have 0.54 opacity according to guidelines\n     * 100/87 * 54 ~= 62\n     */\n    opacity: 0.62,\n  },\n  label: {\n    margin: 16,\n    fontWeight: 'bold',\n  },\n});\n\nexport default DrawerNavigatorItems;\n"]}